/**
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface AggregateIndicators
 */
export interface AggregateIndicators {
    /**
     *
     * @type {TechnicalAnalysis}
     * @memberof AggregateIndicators
     */
    technicalAnalysis?: TechnicalAnalysis;
    /**
     *
     * @type {Trend}
     * @memberof AggregateIndicators
     */
    trend?: Trend;
}
/**
 *
 * @export
 * @interface BasicFinancials
 */
export interface BasicFinancials {
    /**
     * Symbol of the company.
     * @type {string}
     * @memberof BasicFinancials
     */
    symbol?: string;
    /**
     * Metric type.
     * @type {string}
     * @memberof BasicFinancials
     */
    metricType?: string;
    /**
     *
     * @type {object}
     * @memberof BasicFinancials
     */
    series?: object;
    /**
     *
     * @type {object}
     * @memberof BasicFinancials
     */
    metric?: object;
}
/**
 *
 * @export
 * @interface BondCandles
 */
export interface BondCandles {
    /**
     * List of close prices for returned candles.
     * @type {Array<number>}
     * @memberof BondCandles
     */
    c?: Array<number>;
    /**
     * List of timestamp for returned candles.
     * @type {Array<number>}
     * @memberof BondCandles
     */
    t?: Array<number>;
    /**
     * Status of the response. This field can either be ok or no_data.
     * @type {string}
     * @memberof BondCandles
     */
    s?: string;
}
/**
 *
 * @export
 * @interface BondProfile
 */
export interface BondProfile {
    /**
     * ISIN.
     * @type {string}
     * @memberof BondProfile
     */
    isin?: string;
    /**
     * Cusip.
     * @type {string}
     * @memberof BondProfile
     */
    cusip?: string;
    /**
     * FIGI.
     * @type {string}
     * @memberof BondProfile
     */
    figi?: string;
    /**
     * Coupon.
     * @type {number}
     * @memberof BondProfile
     */
    coupon?: number;
    /**
     * Period.
     * @type {string}
     * @memberof BondProfile
     */
    maturityDate?: string;
    /**
     * Offering price.
     * @type {number}
     * @memberof BondProfile
     */
    offeringPrice?: number;
    /**
     * Issue date.
     * @type {string}
     * @memberof BondProfile
     */
    issueDate?: string;
    /**
     * Bond type.
     * @type {string}
     * @memberof BondProfile
     */
    bondType?: string;
    /**
     * Bond type.
     * @type {string}
     * @memberof BondProfile
     */
    debtType?: string;
    /**
     * Industry.
     * @type {string}
     * @memberof BondProfile
     */
    industryGroup?: string;
    /**
     * Sub-Industry.
     * @type {string}
     * @memberof BondProfile
     */
    industrySubGroup?: string;
    /**
     * Asset.
     * @type {string}
     * @memberof BondProfile
     */
    asset?: string;
    /**
     * Asset.
     * @type {string}
     * @memberof BondProfile
     */
    assetType?: string;
    /**
     * Dated date.
     * @type {string}
     * @memberof BondProfile
     */
    datedDate?: string;
    /**
     * First coupon date.
     * @type {string}
     * @memberof BondProfile
     */
    firstCouponDate?: string;
    /**
     * Offering amount.
     * @type {number}
     * @memberof BondProfile
     */
    originalOffering?: number;
    /**
     * Outstanding amount.
     * @type {number}
     * @memberof BondProfile
     */
    amountOutstanding?: number;
    /**
     * Payment frequency.
     * @type {string}
     * @memberof BondProfile
     */
    paymentFrequency?: string;
    /**
     * Security level.
     * @type {string}
     * @memberof BondProfile
     */
    securityLevel?: string;
    /**
     * Callable.
     * @type {boolean}
     * @memberof BondProfile
     */
    callable?: boolean;
    /**
     * Coupon type.
     * @type {string}
     * @memberof BondProfile
     */
    couponType?: string;
}
/**
 *
 * @export
 * @interface BreakdownItem
 */
export interface BreakdownItem {
    /**
     * Access number of the report from which the data is sourced.
     * @type {string}
     * @memberof BreakdownItem
     */
    accessNumber?: string;
    /**
     *
     * @type {object}
     * @memberof BreakdownItem
     */
    breakdown?: object;
}
/**
 *
 * @export
 * @interface Company
 */
export interface Company {
    /**
     * Executive name
     * @type {string}
     * @memberof Company
     */
    name?: string;
    /**
     * Age
     * @type {number}
     * @memberof Company
     */
    age?: number;
    /**
     * Title
     * @type {string}
     * @memberof Company
     */
    title?: string;
    /**
     * Year first appointed as executive/director of the company
     * @type {string}
     * @memberof Company
     */
    since?: string;
    /**
     * Sex
     * @type {string}
     * @memberof Company
     */
    sex?: string;
    /**
     * Total compensation
     * @type {number}
     * @memberof Company
     */
    compensation?: number;
    /**
     * Compensation currency
     * @type {string}
     * @memberof Company
     */
    currency?: string;
}
/**
 *
 * @export
 * @interface CompanyESG
 */
export interface CompanyESG {
    /**
     * symbol
     * @type {string}
     * @memberof CompanyESG
     */
    symbol?: string;
    /**
     * Total ESG Score
     * @type {number}
     * @memberof CompanyESG
     */
    totalESGScore?: number;
    /**
     * Environment Score
     * @type {number}
     * @memberof CompanyESG
     */
    environmentScore?: number;
    /**
     * Governance Score
     * @type {number}
     * @memberof CompanyESG
     */
    governanceScore?: number;
    /**
     * Social Score
     * @type {number}
     * @memberof CompanyESG
     */
    socialScore?: number;
    /**
     *
     * @type {object}
     * @memberof CompanyESG
     */
    data?: object;
}
/**
 *
 * @export
 * @interface CompanyEarningsQualityScore
 */
export interface CompanyEarningsQualityScore {
    /**
     * Symbol
     * @type {string}
     * @memberof CompanyEarningsQualityScore
     */
    symbol?: string;
    /**
     * Frequency
     * @type {string}
     * @memberof CompanyEarningsQualityScore
     */
    freq?: string;
    /**
     * Array of earnings quality score.
     * @type {Array<CompanyEarningsQualityScoreData>}
     * @memberof CompanyEarningsQualityScore
     */
    data?: Array<CompanyEarningsQualityScoreData>;
}
/**
 *
 * @export
 * @interface CompanyEarningsQualityScoreData
 */
export interface CompanyEarningsQualityScoreData {
    /**
     * Period
     * @type {string}
     * @memberof CompanyEarningsQualityScoreData
     */
    period?: string;
    /**
     * Growth Score
     * @type {number}
     * @memberof CompanyEarningsQualityScoreData
     */
    growth?: number;
    /**
     * Profitability Score
     * @type {number}
     * @memberof CompanyEarningsQualityScoreData
     */
    profitability?: number;
    /**
     * Cash Generation and Capital Allocation
     * @type {number}
     * @memberof CompanyEarningsQualityScoreData
     */
    cashGenerationCapitalAllocation?: number;
    /**
     * Leverage Score
     * @type {number}
     * @memberof CompanyEarningsQualityScoreData
     */
    leverage?: number;
    /**
     * Total Score
     * @type {number}
     * @memberof CompanyEarningsQualityScoreData
     */
    score?: number;
    /**
     * Letter Score
     * @type {string}
     * @memberof CompanyEarningsQualityScoreData
     */
    letterScore?: string;
}
/**
 *
 * @export
 * @interface CompanyExecutive
 */
export interface CompanyExecutive {
    /**
     * Company symbol.
     * @type {string}
     * @memberof CompanyExecutive
     */
    symbol?: string;
    /**
     * Array of company\'s executives and members of the Board.
     * @type {Array<Company>}
     * @memberof CompanyExecutive
     */
    executive?: Array<Company>;
}
/**
 *
 * @export
 * @interface CompanyNews
 */
export interface CompanyNews {
    /**
     * News category.
     * @type {string}
     * @memberof CompanyNews
     */
    category?: string;
    /**
     * Published time in UNIX timestamp.
     * @type {number}
     * @memberof CompanyNews
     */
    datetime?: number;
    /**
     * News headline.
     * @type {string}
     * @memberof CompanyNews
     */
    headline?: string;
    /**
     * News ID. This value can be used for <code>minId</code> params to get the latest news only.
     * @type {number}
     * @memberof CompanyNews
     */
    id?: number;
    /**
     * Thumbnail image URL.
     * @type {string}
     * @memberof CompanyNews
     */
    image?: string;
    /**
     * Related stocks and companies mentioned in the article.
     * @type {string}
     * @memberof CompanyNews
     */
    related?: string;
    /**
     * News source.
     * @type {string}
     * @memberof CompanyNews
     */
    source?: string;
    /**
     * News summary.
     * @type {string}
     * @memberof CompanyNews
     */
    summary?: string;
    /**
     * URL of the original article.
     * @type {string}
     * @memberof CompanyNews
     */
    url?: string;
}
/**
 *
 * @export
 * @interface CompanyNewsStatistics
 */
export interface CompanyNewsStatistics {
    /**
     *
     * @type {number}
     * @memberof CompanyNewsStatistics
     */
    articlesInLastWeek?: number;
    /**
     *
     * @type {number}
     * @memberof CompanyNewsStatistics
     */
    buzz?: number;
    /**
     *
     * @type {number}
     * @memberof CompanyNewsStatistics
     */
    weeklyAverage?: number;
}
/**
 *
 * @export
 * @interface CompanyProfile
 */
export interface CompanyProfile {
    /**
     * Address of company\'s headquarter.
     * @type {string}
     * @memberof CompanyProfile
     */
    address?: string;
    /**
     * City of company\'s headquarter.
     * @type {string}
     * @memberof CompanyProfile
     */
    city?: string;
    /**
     * Country of company\'s headquarter.
     * @type {string}
     * @memberof CompanyProfile
     */
    country?: string;
    /**
     * Currency used in company filings.
     * @type {string}
     * @memberof CompanyProfile
     */
    currency?: string;
    /**
     * CUSIP number.
     * @type {string}
     * @memberof CompanyProfile
     */
    cusip?: string;
    /**
     * Sedol number.
     * @type {string}
     * @memberof CompanyProfile
     */
    sedol?: string;
    /**
     * Company business summary.
     * @type {string}
     * @memberof CompanyProfile
     */
    description?: string;
    /**
     * Listed exchange.
     * @type {string}
     * @memberof CompanyProfile
     */
    exchange?: string;
    /**
     * Industry group.
     * @type {string}
     * @memberof CompanyProfile
     */
    ggroup?: string;
    /**
     * Industry.
     * @type {string}
     * @memberof CompanyProfile
     */
    gind?: string;
    /**
     * Sector.
     * @type {string}
     * @memberof CompanyProfile
     */
    gsector?: string;
    /**
     * Sub-industry.
     * @type {string}
     * @memberof CompanyProfile
     */
    gsubind?: string;
    /**
     * ISIN number.
     * @type {string}
     * @memberof CompanyProfile
     */
    isin?: string;
    /**
     * NAICS national industry.
     * @type {string}
     * @memberof CompanyProfile
     */
    naicsNationalIndustry?: string;
    /**
     * NAICS industry.
     * @type {string}
     * @memberof CompanyProfile
     */
    naics?: string;
    /**
     * NAICS sector.
     * @type {string}
     * @memberof CompanyProfile
     */
    naicsSector?: string;
    /**
     * NAICS subsector.
     * @type {string}
     * @memberof CompanyProfile
     */
    naicsSubsector?: string;
    /**
     * Company name.
     * @type {string}
     * @memberof CompanyProfile
     */
    name?: string;
    /**
     * Company phone number.
     * @type {string}
     * @memberof CompanyProfile
     */
    phone?: string;
    /**
     * State of company\'s headquarter.
     * @type {string}
     * @memberof CompanyProfile
     */
    state?: string;
    /**
     * Company symbol/ticker as used on the listed exchange.
     * @type {string}
     * @memberof CompanyProfile
     */
    ticker?: string;
    /**
     * Company website.
     * @type {string}
     * @memberof CompanyProfile
     */
    weburl?: string;
    /**
     * IPO date.
     * @type {string}
     * @memberof CompanyProfile
     */
    ipo?: string;
    /**
     * Market Capitalization.
     * @type {number}
     * @memberof CompanyProfile
     */
    marketCapitalization?: number;
    /**
     * Number of oustanding shares.
     * @type {number}
     * @memberof CompanyProfile
     */
    shareOutstanding?: number;
    /**
     * Number of employee.
     * @type {number}
     * @memberof CompanyProfile
     */
    employeeTotal?: number;
    /**
     * Logo image.
     * @type {string}
     * @memberof CompanyProfile
     */
    logo?: string;
    /**
     * Finnhub industry classification.
     * @type {string}
     * @memberof CompanyProfile
     */
    finnhubIndustry?: string;
}
/**
 *
 * @export
 * @interface CompanyProfile2
 */
export interface CompanyProfile2 {
    /**
     * Country of company\'s headquarter.
     * @type {string}
     * @memberof CompanyProfile2
     */
    country?: string;
    /**
     * Currency used in company filings.
     * @type {string}
     * @memberof CompanyProfile2
     */
    currency?: string;
    /**
     * Listed exchange.
     * @type {string}
     * @memberof CompanyProfile2
     */
    exchange?: string;
    /**
     * Company name.
     * @type {string}
     * @memberof CompanyProfile2
     */
    name?: string;
    /**
     * Company symbol/ticker as used on the listed exchange.
     * @type {string}
     * @memberof CompanyProfile2
     */
    ticker?: string;
    /**
     * IPO date.
     * @type {string}
     * @memberof CompanyProfile2
     */
    ipo?: string;
    /**
     * Market Capitalization.
     * @type {number}
     * @memberof CompanyProfile2
     */
    marketCapitalization?: number;
    /**
     * Number of oustanding shares.
     * @type {number}
     * @memberof CompanyProfile2
     */
    shareOutstanding?: number;
    /**
     * Logo image.
     * @type {string}
     * @memberof CompanyProfile2
     */
    logo?: string;
    /**
     * Company phone number.
     * @type {string}
     * @memberof CompanyProfile2
     */
    phone?: string;
    /**
     * Company website.
     * @type {string}
     * @memberof CompanyProfile2
     */
    weburl?: string;
    /**
     * Finnhub industry classification.
     * @type {string}
     * @memberof CompanyProfile2
     */
    finnhubIndustry?: string;
}
/**
 *
 * @export
 * @interface CountryMetadata
 */
export interface CountryMetadata {
    /**
     * Country name
     * @type {string}
     * @memberof CountryMetadata
     */
    country?: string;
    /**
     * Alpha 2 code
     * @type {string}
     * @memberof CountryMetadata
     */
    code2?: string;
    /**
     * Alpha 3 code
     * @type {string}
     * @memberof CountryMetadata
     */
    code3?: string;
    /**
     * UN code
     * @type {string}
     * @memberof CountryMetadata
     */
    codeNo?: string;
    /**
     * Currency name
     * @type {string}
     * @memberof CountryMetadata
     */
    currency?: string;
    /**
     * Currency code
     * @type {string}
     * @memberof CountryMetadata
     */
    currencyCode?: string;
    /**
     * Region
     * @type {string}
     * @memberof CountryMetadata
     */
    region?: string;
    /**
     * Sub-Region
     * @type {string}
     * @memberof CountryMetadata
     */
    subRegion?: string;
}
/**
 *
 * @export
 * @interface CovidInfo
 */
export interface CovidInfo {
    /**
     * State.
     * @type {string}
     * @memberof CovidInfo
     */
    state?: string;
    /**
     * Number of confirmed cases.
     * @type {number}
     * @memberof CovidInfo
     */
    case?: number;
    /**
     * Number of confirmed deaths.
     * @type {number}
     * @memberof CovidInfo
     */
    death?: number;
    /**
     * Updated time.
     * @type {string}
     * @memberof CovidInfo
     */
    updated?: string;
}
/**
 *
 * @export
 * @interface CryptoCandles
 */
export interface CryptoCandles {
    /**
     * List of open prices for returned candles.
     * @type {Array<number>}
     * @memberof CryptoCandles
     */
    o?: Array<number>;
    /**
     * List of high prices for returned candles.
     * @type {Array<number>}
     * @memberof CryptoCandles
     */
    h?: Array<number>;
    /**
     * List of low prices for returned candles.
     * @type {Array<number>}
     * @memberof CryptoCandles
     */
    l?: Array<number>;
    /**
     * List of close prices for returned candles.
     * @type {Array<number>}
     * @memberof CryptoCandles
     */
    c?: Array<number>;
    /**
     * List of volume data for returned candles.
     * @type {Array<number>}
     * @memberof CryptoCandles
     */
    v?: Array<number>;
    /**
     * List of timestamp for returned candles.
     * @type {Array<number>}
     * @memberof CryptoCandles
     */
    t?: Array<number>;
    /**
     * Status of the response. This field can either be ok or no_data.
     * @type {string}
     * @memberof CryptoCandles
     */
    s?: string;
}
/**
 *
 * @export
 * @interface CryptoProfile
 */
export interface CryptoProfile {
    /**
     * Long name.
     * @type {string}
     * @memberof CryptoProfile
     */
    longName?: string;
    /**
     * Name.
     * @type {string}
     * @memberof CryptoProfile
     */
    name?: string;
    /**
     * Description.
     * @type {string}
     * @memberof CryptoProfile
     */
    description?: string;
    /**
     * Project\'s website.
     * @type {string}
     * @memberof CryptoProfile
     */
    website?: string;
    /**
     * Market capitalization.
     * @type {number}
     * @memberof CryptoProfile
     */
    marketCap?: number;
    /**
     * Total supply.
     * @type {number}
     * @memberof CryptoProfile
     */
    totalSupply?: number;
    /**
     * Max supply.
     * @type {number}
     * @memberof CryptoProfile
     */
    maxSupply?: number;
    /**
     * Circulating supply.
     * @type {number}
     * @memberof CryptoProfile
     */
    circulatingSupply?: number;
    /**
     * Logo image.
     * @type {string}
     * @memberof CryptoProfile
     */
    logo?: string;
    /**
     * Launch date.
     * @type {string}
     * @memberof CryptoProfile
     */
    launchDate?: string;
    /**
     * Proof type.
     * @type {string}
     * @memberof CryptoProfile
     */
    proofType?: string;
}
/**
 *
 * @export
 * @interface CryptoSymbol
 */
export interface CryptoSymbol {
    /**
     * Symbol description
     * @type {string}
     * @memberof CryptoSymbol
     */
    description?: string;
    /**
     * Display symbol name.
     * @type {string}
     * @memberof CryptoSymbol
     */
    displaySymbol?: string;
    /**
     * Unique symbol used to identify this symbol used in <code>/crypto/candle</code> endpoint.
     * @type {string}
     * @memberof CryptoSymbol
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface Development
 */
export interface Development {
    /**
     * Company symbol.
     * @type {string}
     * @memberof Development
     */
    symbol?: string;
    /**
     * Published time in <code>YYYY-MM-DD HH:MM:SS</code> format.
     * @type {string}
     * @memberof Development
     */
    datetime?: string;
    /**
     * Development headline.
     * @type {string}
     * @memberof Development
     */
    headline?: string;
    /**
     * Development description.
     * @type {string}
     * @memberof Development
     */
    description?: string;
    /**
     * URL.
     * @type {string}
     * @memberof Development
     */
    url?: string;
}
/**
 *
 * @export
 * @interface Dividends
 */
export interface Dividends {
    /**
     * Symbol.
     * @type {string}
     * @memberof Dividends
     */
    symbol?: string;
    /**
     * Ex-Dividend date.
     * @type {string}
     * @memberof Dividends
     */
    date?: string;
    /**
     * Amount in local currency.
     * @type {number}
     * @memberof Dividends
     */
    amount?: number;
    /**
     * Adjusted dividend.
     * @type {number}
     * @memberof Dividends
     */
    adjustedAmount?: number;
    /**
     * Pay date.
     * @type {string}
     * @memberof Dividends
     */
    payDate?: string;
    /**
     * Record date.
     * @type {string}
     * @memberof Dividends
     */
    recordDate?: string;
    /**
     * Declaration date.
     * @type {string}
     * @memberof Dividends
     */
    declarationDate?: string;
    /**
     * Currency.
     * @type {string}
     * @memberof Dividends
     */
    currency?: string;
}
/**
 *
 * @export
 * @interface Dividends2
 */
export interface Dividends2 {
    /**
     * Symbol
     * @type {string}
     * @memberof Dividends2
     */
    symbol?: string;
    /**
     *
     * @type {Array<Dividends2Info>}
     * @memberof Dividends2
     */
    data?: Array<Dividends2Info>;
}
/**
 *
 * @export
 * @interface Dividends2Info
 */
export interface Dividends2Info {
    /**
     * Ex-Dividend date.
     * @type {string}
     * @memberof Dividends2Info
     */
    exDate?: string;
    /**
     * Amount in local currency.
     * @type {number}
     * @memberof Dividends2Info
     */
    amount?: number;
}
/**
 *
 * @export
 * @interface ETFCountryExposureData
 */
export interface ETFCountryExposureData {
    /**
     * Country
     * @type {string}
     * @memberof ETFCountryExposureData
     */
    country?: string;
    /**
     * Percent of exposure.
     * @type {number}
     * @memberof ETFCountryExposureData
     */
    exposure?: number;
}
/**
 *
 * @export
 * @interface ETFHoldingsData
 */
export interface ETFHoldingsData {
    /**
     * Symbol description
     * @type {string}
     * @memberof ETFHoldingsData
     */
    symbol?: string;
    /**
     * Security name
     * @type {string}
     * @memberof ETFHoldingsData
     */
    name?: string;
    /**
     * ISIN.
     * @type {string}
     * @memberof ETFHoldingsData
     */
    isin?: string;
    /**
     * CUSIP.
     * @type {string}
     * @memberof ETFHoldingsData
     */
    cusip?: string;
    /**
     * Number of shares owned by the ETF.
     * @type {number}
     * @memberof ETFHoldingsData
     */
    share?: number;
    /**
     * Portfolio\'s percent
     * @type {number}
     * @memberof ETFHoldingsData
     */
    percent?: number;
    /**
     * Market value
     * @type {number}
     * @memberof ETFHoldingsData
     */
    value?: number;
}
/**
 *
 * @export
 * @interface ETFProfileData
 */
export interface ETFProfileData {
    /**
     * Name
     * @type {string}
     * @memberof ETFProfileData
     */
    name?: string;
    /**
     * Asset Class.
     * @type {string}
     * @memberof ETFProfileData
     */
    assetClass?: string;
    /**
     * Investment Segment.
     * @type {string}
     * @memberof ETFProfileData
     */
    investmentSegment?: string;
    /**
     * AUM.
     * @type {number}
     * @memberof ETFProfileData
     */
    aum?: number;
    /**
     * NAV.
     * @type {number}
     * @memberof ETFProfileData
     */
    nav?: number;
    /**
     * NAV currency.
     * @type {string}
     * @memberof ETFProfileData
     */
    navCurrency?: string;
    /**
     * Expense ratio.
     * @type {number}
     * @memberof ETFProfileData
     */
    expenseRatio?: number;
    /**
     * Tracking Index.
     * @type {string}
     * @memberof ETFProfileData
     */
    trackingIndex?: string;
    /**
     * ETF issuer.
     * @type {string}
     * @memberof ETFProfileData
     */
    etfCompany?: string;
    /**
     * ETF domicile.
     * @type {string}
     * @memberof ETFProfileData
     */
    domicile?: string;
    /**
     * Inception date.
     * @type {string}
     * @memberof ETFProfileData
     */
    inceptionDate?: string;
    /**
     * ETF\'s website.
     * @type {string}
     * @memberof ETFProfileData
     */
    website?: string;
    /**
     * ISIN.
     * @type {string}
     * @memberof ETFProfileData
     */
    isin?: string;
    /**
     * CUSIP.
     * @type {string}
     * @memberof ETFProfileData
     */
    cusip?: string;
    /**
     * P/E.
     * @type {number}
     * @memberof ETFProfileData
     */
    priceToEarnings?: number;
    /**
     * P/B.
     * @type {number}
     * @memberof ETFProfileData
     */
    priceToBook?: number;
    /**
     * 30-day average volume.
     * @type {number}
     * @memberof ETFProfileData
     */
    avgVolume?: number;
    /**
     * ETF\'s description.
     * @type {string}
     * @memberof ETFProfileData
     */
    description?: string;
}
/**
 *
 * @export
 * @interface ETFSectorExposureData
 */
export interface ETFSectorExposureData {
    /**
     * Industry
     * @type {string}
     * @memberof ETFSectorExposureData
     */
    industry?: string;
    /**
     * Percent of exposure.
     * @type {number}
     * @memberof ETFSectorExposureData
     */
    exposure?: number;
}
/**
 *
 * @export
 * @interface ETFsCountryExposure
 */
export interface ETFsCountryExposure {
    /**
     * ETF symbol.
     * @type {string}
     * @memberof ETFsCountryExposure
     */
    symbol?: string;
    /**
     * Array of countries and and exposure levels.
     * @type {Array<ETFCountryExposureData>}
     * @memberof ETFsCountryExposure
     */
    countryExposure?: Array<ETFCountryExposureData>;
}
/**
 *
 * @export
 * @interface ETFsHoldings
 */
export interface ETFsHoldings {
    /**
     * ETF symbol.
     * @type {string}
     * @memberof ETFsHoldings
     */
    symbol?: string;
    /**
     * Holdings update date.
     * @type {string}
     * @memberof ETFsHoldings
     */
    atDate?: string;
    /**
     * Number of holdings.
     * @type {number}
     * @memberof ETFsHoldings
     */
    numberOfHoldings?: number;
    /**
     * Array of holdings.
     * @type {Array<ETFHoldingsData>}
     * @memberof ETFsHoldings
     */
    holdings?: Array<ETFHoldingsData>;
}
/**
 *
 * @export
 * @interface ETFsProfile
 */
export interface ETFsProfile {
    /**
     * Symbol.
     * @type {string}
     * @memberof ETFsProfile
     */
    symbol?: string;
    /**
     *
     * @type {ETFProfileData}
     * @memberof ETFsProfile
     */
    profile?: ETFProfileData;
}
/**
 *
 * @export
 * @interface ETFsSectorExposure
 */
export interface ETFsSectorExposure {
    /**
     * ETF symbol.
     * @type {string}
     * @memberof ETFsSectorExposure
     */
    symbol?: string;
    /**
     * Array of industries and exposure levels.
     * @type {Array<ETFSectorExposureData>}
     * @memberof ETFsSectorExposure
     */
    sectorExposure?: Array<ETFSectorExposureData>;
}
/**
 *
 * @export
 * @interface EarningRelease
 */
export interface EarningRelease {
    /**
     * Symbol.
     * @type {string}
     * @memberof EarningRelease
     */
    symbol?: string;
    /**
     * Date.
     * @type {string}
     * @memberof EarningRelease
     */
    date?: string;
    /**
     * Indicates whether the earnings is announced before market open(<code>bmo</code>), after market close(<code>amc</code>), or during market hour(<code>dmh</code>).
     * @type {string}
     * @memberof EarningRelease
     */
    hour?: string;
    /**
     * Earnings year.
     * @type {number}
     * @memberof EarningRelease
     */
    year?: number;
    /**
     * Earnings quarter.
     * @type {number}
     * @memberof EarningRelease
     */
    quarter?: number;
    /**
     * EPS estimate.
     * @type {number}
     * @memberof EarningRelease
     */
    epsEstimate?: number;
    /**
     * EPS actual.
     * @type {number}
     * @memberof EarningRelease
     */
    epsActual?: number;
    /**
     * Revenue estimate including Finnhub\'s proprietary estimates.
     * @type {number}
     * @memberof EarningRelease
     */
    revenueEstimate?: number;
    /**
     * Revenue actual.
     * @type {number}
     * @memberof EarningRelease
     */
    revenueActual?: number;
}
/**
 *
 * @export
 * @interface EarningResult
 */
export interface EarningResult {
    /**
     * Actual earning result.
     * @type {number}
     * @memberof EarningResult
     */
    actual?: number;
    /**
     * Estimated earning.
     * @type {number}
     * @memberof EarningResult
     */
    estimate?: number;
    /**
     * Surprise - The difference between actual and estimate.
     * @type {number}
     * @memberof EarningResult
     */
    surprise?: number;
    /**
     * Surprise percent.
     * @type {number}
     * @memberof EarningResult
     */
    surprisePercent?: number;
    /**
     * Reported period.
     * @type {string}
     * @memberof EarningResult
     */
    period?: string;
    /**
     * Company symbol.
     * @type {string}
     * @memberof EarningResult
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface EarningsCalendar
 */
export interface EarningsCalendar {
    /**
     * Array of earnings release.
     * @type {Array<EarningRelease>}
     * @memberof EarningsCalendar
     */
    earningsCalendar?: Array<EarningRelease>;
}
/**
 *
 * @export
 * @interface EarningsCallTranscripts
 */
export interface EarningsCallTranscripts {
    /**
     * Company symbol.
     * @type {string}
     * @memberof EarningsCallTranscripts
     */
    symbol?: string;
    /**
     * Transcript content.
     * @type {Array<TranscriptContent>}
     * @memberof EarningsCallTranscripts
     */
    transcript?: Array<TranscriptContent>;
    /**
     * Participant list
     * @type {Array<TranscriptParticipant>}
     * @memberof EarningsCallTranscripts
     */
    participant?: Array<TranscriptParticipant>;
    /**
     * Audio link.
     * @type {string}
     * @memberof EarningsCallTranscripts
     */
    audio?: string;
    /**
     * Transcript\'s ID.
     * @type {string}
     * @memberof EarningsCallTranscripts
     */
    id?: string;
    /**
     * Title.
     * @type {string}
     * @memberof EarningsCallTranscripts
     */
    title?: string;
    /**
     * Time of the event.
     * @type {string}
     * @memberof EarningsCallTranscripts
     */
    time?: string;
    /**
     * Year of earnings result in the case of earnings call transcript.
     * @type {number}
     * @memberof EarningsCallTranscripts
     */
    year?: number;
    /**
     * Quarter of earnings result in the case of earnings call transcript.
     * @type {number}
     * @memberof EarningsCallTranscripts
     */
    quarter?: number;
}
/**
 *
 * @export
 * @interface EarningsCallTranscriptsList
 */
export interface EarningsCallTranscriptsList {
    /**
     * Company symbol.
     * @type {string}
     * @memberof EarningsCallTranscriptsList
     */
    symbol?: string;
    /**
     * Array of transcripts\' metadata
     * @type {Array<StockTranscripts>}
     * @memberof EarningsCallTranscriptsList
     */
    transcripts?: Array<StockTranscripts>;
}
/**
 *
 * @export
 * @interface EarningsEstimates
 */
export interface EarningsEstimates {
    /**
     * List of estimates
     * @type {Array<EarningsEstimatesInfo>}
     * @memberof EarningsEstimates
     */
    data?: Array<EarningsEstimatesInfo>;
    /**
     * Frequency: annual or quarterly.
     * @type {string}
     * @memberof EarningsEstimates
     */
    freq?: string;
    /**
     * Company symbol.
     * @type {string}
     * @memberof EarningsEstimates
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface EarningsEstimatesInfo
 */
export interface EarningsEstimatesInfo {
    /**
     * Average EPS estimates including Finnhub\'s proprietary estimates.
     * @type {number}
     * @memberof EarningsEstimatesInfo
     */
    epsAvg?: number;
    /**
     * Highest estimate.
     * @type {number}
     * @memberof EarningsEstimatesInfo
     */
    epsHigh?: number;
    /**
     * Lowest estimate.
     * @type {number}
     * @memberof EarningsEstimatesInfo
     */
    epsLow?: number;
    /**
     * Number of Analysts.
     * @type {number}
     * @memberof EarningsEstimatesInfo
     */
    numberAnalysts?: number;
    /**
     * Period.
     * @type {string}
     * @memberof EarningsEstimatesInfo
     */
    period?: string;
}
/**
 *
 * @export
 * @interface EbitEstimates
 */
export interface EbitEstimates {
    /**
     * List of estimates
     * @type {Array<EbitEstimatesInfo>}
     * @memberof EbitEstimates
     */
    data?: Array<EbitEstimatesInfo>;
    /**
     * Frequency: annual or quarterly.
     * @type {string}
     * @memberof EbitEstimates
     */
    freq?: string;
    /**
     * Company symbol.
     * @type {string}
     * @memberof EbitEstimates
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface EbitEstimatesInfo
 */
export interface EbitEstimatesInfo {
    /**
     * Average EBIT estimates including Finnhub\'s proprietary estimates.
     * @type {number}
     * @memberof EbitEstimatesInfo
     */
    ebitAvg?: number;
    /**
     * Highest estimate.
     * @type {number}
     * @memberof EbitEstimatesInfo
     */
    ebitHigh?: number;
    /**
     * Lowest estimate.
     * @type {number}
     * @memberof EbitEstimatesInfo
     */
    ebitLow?: number;
    /**
     * Number of Analysts.
     * @type {number}
     * @memberof EbitEstimatesInfo
     */
    numberAnalysts?: number;
    /**
     * Period.
     * @type {string}
     * @memberof EbitEstimatesInfo
     */
    period?: string;
}
/**
 *
 * @export
 * @interface EbitdaEstimates
 */
export interface EbitdaEstimates {
    /**
     * List of estimates
     * @type {Array<EbitdaEstimatesInfo>}
     * @memberof EbitdaEstimates
     */
    data?: Array<EbitdaEstimatesInfo>;
    /**
     * Frequency: annual or quarterly.
     * @type {string}
     * @memberof EbitdaEstimates
     */
    freq?: string;
    /**
     * Company symbol.
     * @type {string}
     * @memberof EbitdaEstimates
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface EbitdaEstimatesInfo
 */
export interface EbitdaEstimatesInfo {
    /**
     * Average EBITDA estimates including Finnhub\'s proprietary estimates.
     * @type {number}
     * @memberof EbitdaEstimatesInfo
     */
    ebitdaAvg?: number;
    /**
     * Highest estimate.
     * @type {number}
     * @memberof EbitdaEstimatesInfo
     */
    ebitdaHigh?: number;
    /**
     * Lowest estimate.
     * @type {number}
     * @memberof EbitdaEstimatesInfo
     */
    ebitdaLow?: number;
    /**
     * Number of Analysts.
     * @type {number}
     * @memberof EbitdaEstimatesInfo
     */
    numberAnalysts?: number;
    /**
     * Period.
     * @type {string}
     * @memberof EbitdaEstimatesInfo
     */
    period?: string;
}
/**
 *
 * @export
 * @interface Economic event
 */
export interface Economic {
    /**
     * Actual release
     * @type {number}
     * @memberof Economic event
     */
    actual?: number;
    /**
     * Previous release
     * @type {number}
     * @memberof Economic event
     */
    prev?: number;
    /**
     * Country
     * @type {string}
     * @memberof Economic event
     */
    country?: string;
    /**
     * Unit
     * @type {string}
     * @memberof Economic event
     */
    unit?: string;
    /**
     * Estimate
     * @type {number}
     * @memberof Economic event
     */
    estimate?: number;
    /**
     * Event
     * @type {string}
     * @memberof Economic event
     */
    event?: string;
    /**
     * Impact level
     * @type {string}
     * @memberof Economic event
     */
    impact?: string;
    /**
     * Release time
     * @type {string}
     * @memberof Economic event
     */
    time?: string;
}
/**
 *
 * @export
 * @interface EconomicCalendar
 */
export interface EconomicCalendar {
    /**
     * Array of economic events.
     * @type {Array<Economic event>}
     * @memberof EconomicCalendar
     */
    economicCalendar?: Array<Economic>;
}
/**
 *
 * @export
 * @interface EconomicCode
 */
export interface EconomicCode {
    /**
     * Finnhub economic code used to get historical data
     * @type {string}
     * @memberof EconomicCode
     */
    code?: string;
    /**
     * Country
     * @type {string}
     * @memberof EconomicCode
     */
    country?: string;
    /**
     * Indicator name
     * @type {string}
     * @memberof EconomicCode
     */
    name?: string;
    /**
     * Unit
     * @type {string}
     * @memberof EconomicCode
     */
    unit?: string;
}
/**
 *
 * @export
 * @interface EconomicData
 */
export interface EconomicData {
    /**
     * Array of economic data for requested code.
     * @type {Array<EconomicDataInfo>}
     * @memberof EconomicData
     */
    data?: Array<EconomicDataInfo>;
    /**
     * Finnhub economic code
     * @type {string}
     * @memberof EconomicData
     */
    code?: string;
}
/**
 *
 * @export
 * @interface EconomicDataInfo
 */
export interface EconomicDataInfo {
    /**
     * Date of the reading
     * @type {string}
     * @memberof EconomicDataInfo
     */
    date?: string;
    /**
     * Value
     * @type {number}
     * @memberof EconomicDataInfo
     */
    value?: number;
}
/**
 *
 * @export
 * @interface FDAComitteeMeeting
 */
export interface FDAComitteeMeeting {
    /**
     * Start time of the event in EST.
     * @type {string}
     * @memberof FDAComitteeMeeting
     */
    fromDate?: string;
    /**
     * End time of the event in EST.
     * @type {string}
     * @memberof FDAComitteeMeeting
     */
    toDate?: string;
    /**
     * Event\'s description.
     * @type {string}
     * @memberof FDAComitteeMeeting
     */
    eventDescription?: string;
    /**
     * URL.
     * @type {string}
     * @memberof FDAComitteeMeeting
     */
    url?: string;
}
/**
 *
 * @export
 * @interface Filing
 */
export interface Filing {
    /**
     * Access number.
     * @type {string}
     * @memberof Filing
     */
    accessNumber?: string;
    /**
     * Symbol.
     * @type {string}
     * @memberof Filing
     */
    symbol?: string;
    /**
     * CIK.
     * @type {string}
     * @memberof Filing
     */
    cik?: string;
    /**
     * Form type.
     * @type {string}
     * @memberof Filing
     */
    form?: string;
    /**
     * Filed date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof Filing
     */
    filedDate?: string;
    /**
     * Accepted date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof Filing
     */
    acceptedDate?: string;
    /**
     * Report\'s URL.
     * @type {string}
     * @memberof Filing
     */
    reportUrl?: string;
    /**
     * Filing\'s URL.
     * @type {string}
     * @memberof Filing
     */
    filingUrl?: string;
}
/**
 *
 * @export
 * @interface FilingSentiment
 */
export interface FilingSentiment {
    /**
     * % of negative words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    negative?: number;
    /**
     * % of positive words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    positive?: number;
    /**
     * % of polarity words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    polarity?: number;
    /**
     * % of litigious words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    litigious?: number;
    /**
     * % of uncertainty words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    uncertainty?: number;
    /**
     * % of constraining words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    constraining?: number;
    /**
     * % of modal-weak words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    'modal-weak'?: number;
    /**
     * % of modal-strong words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    'modal-strong'?: number;
    /**
     * % of modal-moderate words in the filing.
     * @type {number}
     * @memberof FilingSentiment
     */
    'modal-moderate'?: number;
}
/**
 *
 * @export
 * @interface FinancialStatements
 */
export interface FinancialStatements {
    /**
     * Symbol of the company.
     * @type {string}
     * @memberof FinancialStatements
     */
    symbol?: string;
    /**
     * An array of map of key, value pairs containing the data for each period.
     * @type {Array<object>}
     * @memberof FinancialStatements
     */
    financials?: Array<object>;
}
/**
 *
 * @export
 * @interface FinancialsAsReported
 */
export interface FinancialsAsReported {
    /**
     * Symbol
     * @type {string}
     * @memberof FinancialsAsReported
     */
    symbol?: string;
    /**
     * CIK
     * @type {string}
     * @memberof FinancialsAsReported
     */
    cik?: string;
    /**
     * Array of filings.
     * @type {Array<Report>}
     * @memberof FinancialsAsReported
     */
    data?: Array<Report>;
}
/**
 *
 * @export
 * @interface ForexCandles
 */
export interface ForexCandles {
    /**
     * List of open prices for returned candles.
     * @type {Array<number>}
     * @memberof ForexCandles
     */
    o?: Array<number>;
    /**
     * List of high prices for returned candles.
     * @type {Array<number>}
     * @memberof ForexCandles
     */
    h?: Array<number>;
    /**
     * List of low prices for returned candles.
     * @type {Array<number>}
     * @memberof ForexCandles
     */
    l?: Array<number>;
    /**
     * List of close prices for returned candles.
     * @type {Array<number>}
     * @memberof ForexCandles
     */
    c?: Array<number>;
    /**
     * List of volume data for returned candles.
     * @type {Array<number>}
     * @memberof ForexCandles
     */
    v?: Array<number>;
    /**
     * List of timestamp for returned candles.
     * @type {Array<number>}
     * @memberof ForexCandles
     */
    t?: Array<number>;
    /**
     * Status of the response. This field can either be ok or no_data.
     * @type {string}
     * @memberof ForexCandles
     */
    s?: string;
}
/**
 *
 * @export
 * @interface ForexSymbol
 */
export interface ForexSymbol {
    /**
     * Symbol description
     * @type {string}
     * @memberof ForexSymbol
     */
    description?: string;
    /**
     * Display symbol name.
     * @type {string}
     * @memberof ForexSymbol
     */
    displaySymbol?: string;
    /**
     * Unique symbol used to identify this symbol used in <code>/forex/candle</code> endpoint.
     * @type {string}
     * @memberof ForexSymbol
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface Forexrates
 */
export interface Forexrates {
    /**
     * Base currency.
     * @type {string}
     * @memberof Forexrates
     */
    base?: string;
    /**
     *
     * @type {object}
     * @memberof Forexrates
     */
    quote?: object;
}
/**
 *
 * @export
 * @interface FundOwnership
 */
export interface FundOwnership {
    /**
     * Symbol of the company.
     * @type {string}
     * @memberof FundOwnership
     */
    symbol?: string;
    /**
     * Array of investors with detailed information about their holdings.
     * @type {Array<FundOwnershipInfo>}
     * @memberof FundOwnership
     */
    ownership?: Array<FundOwnershipInfo>;
}
/**
 *
 * @export
 * @interface FundOwnershipInfo
 */
export interface FundOwnershipInfo {
    /**
     * Investor\'s name.
     * @type {string}
     * @memberof FundOwnershipInfo
     */
    name?: string;
    /**
     * Number of shares held by the investor.
     * @type {number}
     * @memberof FundOwnershipInfo
     */
    share?: number;
    /**
     * Number of share changed (net buy or sell) from the last period.
     * @type {number}
     * @memberof FundOwnershipInfo
     */
    change?: number;
    /**
     * Filing date.
     * @type {string}
     * @memberof FundOwnershipInfo
     */
    filingDate?: string;
    /**
     * Percent of the fund\'s portfolio comprised of the company\'s share.
     * @type {number}
     * @memberof FundOwnershipInfo
     */
    portfolioPercent?: number;
}
/**
 *
 * @export
 * @interface HistoricalNBBO
 */
export interface HistoricalNBBO {
    /**
     * Symbol.
     * @type {string}
     * @memberof HistoricalNBBO
     */
    s?: string;
    /**
     * Number of ticks skipped.
     * @type {number}
     * @memberof HistoricalNBBO
     */
    skip?: number;
    /**
     * Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.
     * @type {number}
     * @memberof HistoricalNBBO
     */
    count?: number;
    /**
     * Total number of ticks for that date.
     * @type {number}
     * @memberof HistoricalNBBO
     */
    total?: number;
    /**
     * List of Ask volume data.
     * @type {Array<number>}
     * @memberof HistoricalNBBO
     */
    av?: Array<number>;
    /**
     * List of Ask price data.
     * @type {Array<number>}
     * @memberof HistoricalNBBO
     */
    a?: Array<number>;
    /**
     * List of venues/exchanges - Ask price. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>
     * @type {Array<string>}
     * @memberof HistoricalNBBO
     */
    ax?: Array<string>;
    /**
     * List of Bid volume data.
     * @type {Array<number>}
     * @memberof HistoricalNBBO
     */
    bv?: Array<number>;
    /**
     * List of Bid price data.
     * @type {Array<number>}
     * @memberof HistoricalNBBO
     */
    b?: Array<number>;
    /**
     * List of venues/exchanges - Bid price. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>
     * @type {Array<string>}
     * @memberof HistoricalNBBO
     */
    bx?: Array<string>;
    /**
     * List of timestamp in UNIX ms.
     * @type {Array<number>}
     * @memberof HistoricalNBBO
     */
    t?: Array<number>;
    /**
     * List of quote conditions. A comprehensive list of quote conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1iiA6e7Osdtai0oPMOUzgAIKXCsay89dFDmsegz6OpEg/edit?usp=sharing\">here</a>
     * @type {Array<Array<string>>}
     * @memberof HistoricalNBBO
     */
    c?: Array<Array<string>>;
}
/**
 *
 * @export
 * @interface IPOCalendar
 */
export interface IPOCalendar {
    /**
     * Array of IPO events.
     * @type {Array<IPOEvent>}
     * @memberof IPOCalendar
     */
    ipoCalendar?: Array<IPOEvent>;
}
/**
 *
 * @export
 * @interface IPOEvent
 */
export interface IPOEvent {
    /**
     * Symbol.
     * @type {string}
     * @memberof IPOEvent
     */
    symbol?: string;
    /**
     * IPO date.
     * @type {string}
     * @memberof IPOEvent
     */
    date?: string;
    /**
     * Exchange.
     * @type {string}
     * @memberof IPOEvent
     */
    exchange?: string;
    /**
     * Company\'s name.
     * @type {string}
     * @memberof IPOEvent
     */
    name?: string;
    /**
     * IPO status. Can take 1 of the following values: <code>expected</code>,<code>priced</code>,<code>withdrawn</code>,<code>filed</code>
     * @type {string}
     * @memberof IPOEvent
     */
    status?: string;
    /**
     * Projected price or price range.
     * @type {string}
     * @memberof IPOEvent
     */
    price?: string;
    /**
     * Number of shares offered during the IPO.
     * @type {number}
     * @memberof IPOEvent
     */
    numberOfShares?: number;
    /**
     * Total shares value.
     * @type {number}
     * @memberof IPOEvent
     */
    totalSharesValue?: number;
}
/**
 *
 * @export
 * @interface IndexHistoricalConstituent
 */
export interface IndexHistoricalConstituent {
    /**
     * Symbol
     * @type {string}
     * @memberof IndexHistoricalConstituent
     */
    symbol?: string;
    /**
     * <code>add</code> or <code>remove</code>.
     * @type {string}
     * @memberof IndexHistoricalConstituent
     */
    action?: string;
    /**
     * Date of joining or leaving the index.
     * @type {string}
     * @memberof IndexHistoricalConstituent
     */
    date?: string;
}
/**
 *
 * @export
 * @interface Indicator
 */
export interface Indicator {
    /**
     * Number of buy signals
     * @type {number}
     * @memberof Indicator
     */
    buy?: number;
    /**
     * Number of neutral signals
     * @type {number}
     * @memberof Indicator
     */
    neutral?: number;
    /**
     * Number of sell signals
     * @type {number}
     * @memberof Indicator
     */
    sell?: number;
}
/**
 *
 * @export
 * @interface IndicesConstituents
 */
export interface IndicesConstituents {
    /**
     * Index\'s symbol.
     * @type {string}
     * @memberof IndicesConstituents
     */
    symbol?: string;
    /**
     * Array of constituents.
     * @type {Array<string>}
     * @memberof IndicesConstituents
     */
    constituents?: Array<string>;
}
/**
 *
 * @export
 * @interface IndicesHistoricalConstituents
 */
export interface IndicesHistoricalConstituents {
    /**
     * Index\'s symbol.
     * @type {string}
     * @memberof IndicesHistoricalConstituents
     */
    symbol?: string;
    /**
     * Array of historical constituents.
     * @type {Array<IndexHistoricalConstituent>}
     * @memberof IndicesHistoricalConstituents
     */
    historicalConstituents?: Array<IndexHistoricalConstituent>;
}
/**
 *
 * @export
 * @interface InsiderSentiments
 */
export interface InsiderSentiments {
    /**
     * Symbol of the company.
     * @type {string}
     * @memberof InsiderSentiments
     */
    symbol?: string;
    /**
     * Array of sentiment data.
     * @type {Array<InsiderSentimentsData>}
     * @memberof InsiderSentiments
     */
    data?: Array<InsiderSentimentsData>;
}
/**
 *
 * @export
 * @interface InsiderSentimentsData
 */
export interface InsiderSentimentsData {
    /**
     * Symbol.
     * @type {string}
     * @memberof InsiderSentimentsData
     */
    symbol?: string;
    /**
     * Year.
     * @type {number}
     * @memberof InsiderSentimentsData
     */
    year?: number;
    /**
     * Month.
     * @type {number}
     * @memberof InsiderSentimentsData
     */
    month?: number;
    /**
     * Net buying/selling from all insiders\' transactions.
     * @type {number}
     * @memberof InsiderSentimentsData
     */
    change?: number;
    /**
     * Monthly share purchase ratio.
     * @type {number}
     * @memberof InsiderSentimentsData
     */
    mspr?: number;
}
/**
 *
 * @export
 * @interface InsiderTransactions
 */
export interface InsiderTransactions {
    /**
     * Symbol of the company.
     * @type {string}
     * @memberof InsiderTransactions
     */
    symbol?: string;
    /**
     * Array of insider transactions.
     * @type {Array<Transactions>}
     * @memberof InsiderTransactions
     */
    data?: Array<Transactions>;
}
/**
 *
 * @export
 * @interface InternationalFiling
 */
export interface InternationalFiling {
    /**
     * Symbol.
     * @type {string}
     * @memberof InternationalFiling
     */
    symbol?: string;
    /**
     * Company name.
     * @type {string}
     * @memberof InternationalFiling
     */
    companyName?: string;
    /**
     * Filed date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof InternationalFiling
     */
    filedDate?: string;
    /**
     * Category.
     * @type {string}
     * @memberof InternationalFiling
     */
    category?: string;
    /**
     * Document\'s title.
     * @type {string}
     * @memberof InternationalFiling
     */
    title?: string;
    /**
     * Document\'s description.
     * @type {string}
     * @memberof InternationalFiling
     */
    description?: string;
    /**
     * Url.
     * @type {string}
     * @memberof InternationalFiling
     */
    url?: string;
    /**
     * Language.
     * @type {string}
     * @memberof InternationalFiling
     */
    language?: string;
    /**
     * Country.
     * @type {string}
     * @memberof InternationalFiling
     */
    country?: string;
}
/**
 *
 * @export
 * @interface InvestmentThemePortfolio
 */
export interface InvestmentThemePortfolio {
    /**
     * Symbol
     * @type {string}
     * @memberof InvestmentThemePortfolio
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface InvestmentThemes
 */
export interface InvestmentThemes {
    /**
     * Investment theme
     * @type {string}
     * @memberof InvestmentThemes
     */
    theme?: string;
    /**
     * Investment theme portfolio.
     * @type {Array<InvestmentThemePortfolio>}
     * @memberof InvestmentThemes
     */
    data?: Array<InvestmentThemePortfolio>;
}
/**
 *
 * @export
 * @interface KeyCustomersSuppliers
 */
export interface KeyCustomersSuppliers {
    /**
     * Symbol
     * @type {string}
     * @memberof KeyCustomersSuppliers
     */
    symbol?: string;
    /**
     * Name
     * @type {string}
     * @memberof KeyCustomersSuppliers
     */
    name?: string;
    /**
     * Country
     * @type {string}
     * @memberof KeyCustomersSuppliers
     */
    country?: string;
    /**
     * Industry
     * @type {string}
     * @memberof KeyCustomersSuppliers
     */
    industry?: string;
    /**
     * Whether the company is a customer.
     * @type {boolean}
     * @memberof KeyCustomersSuppliers
     */
    customer?: boolean;
    /**
     * Whether the company is a supplier
     * @type {boolean}
     * @memberof KeyCustomersSuppliers
     */
    supplier?: boolean;
    /**
     * 1-month price correlation
     * @type {number}
     * @memberof KeyCustomersSuppliers
     */
    oneMonthCorrelation?: number;
    /**
     * 1-year price correlation
     * @type {number}
     * @memberof KeyCustomersSuppliers
     */
    oneYearCorrelation?: number;
    /**
     * 6-month price correlation
     * @type {number}
     * @memberof KeyCustomersSuppliers
     */
    sixMonthCorrelation?: number;
    /**
     * 3-month price correlation
     * @type {number}
     * @memberof KeyCustomersSuppliers
     */
    threeMonthCorrelation?: number;
    /**
     * 2-week price correlation
     * @type {number}
     * @memberof KeyCustomersSuppliers
     */
    twoWeekCorrelation?: number;
    /**
     * 2-year price correlation
     * @type {number}
     * @memberof KeyCustomersSuppliers
     */
    twoYearCorrelation?: number;
}
/**
 *
 * @export
 * @interface LastBidAsk
 */
export interface LastBidAsk {
    /**
     * Bid price.
     * @type {number}
     * @memberof LastBidAsk
     */
    b?: number;
    /**
     * Ask price.
     * @type {number}
     * @memberof LastBidAsk
     */
    a?: number;
    /**
     * Bid volume.
     * @type {number}
     * @memberof LastBidAsk
     */
    bv?: number;
    /**
     * Ask volume.
     * @type {number}
     * @memberof LastBidAsk
     */
    av?: number;
    /**
     * Reference UNIX timestamp in ms.
     * @type {number}
     * @memberof LastBidAsk
     */
    t?: number;
}
/**
 *
 * @export
 * @interface LobbyingData
 */
export interface LobbyingData {
    /**
     * Symbol.
     * @type {string}
     * @memberof LobbyingData
     */
    symbol?: string;
    /**
     * Company\'s name.
     * @type {string}
     * @memberof LobbyingData
     */
    name?: string;
    /**
     * Description.
     * @type {string}
     * @memberof LobbyingData
     */
    description?: string;
    /**
     * Country.
     * @type {string}
     * @memberof LobbyingData
     */
    country?: string;
    /**
     * Year.
     * @type {number}
     * @memberof LobbyingData
     */
    year?: number;
    /**
     * Period.
     * @type {string}
     * @memberof LobbyingData
     */
    period?: string;
    /**
     * Income reported by lobbying firms.
     * @type {number}
     * @memberof LobbyingData
     */
    income?: number;
    /**
     * Expenses reported by the company.
     * @type {number}
     * @memberof LobbyingData
     */
    expenses?: number;
    /**
     * Document\'s URL.
     * @type {string}
     * @memberof LobbyingData
     */
    documentUrl?: string;
    /**
     * Posted name.
     * @type {string}
     * @memberof LobbyingData
     */
    postedName?: string;
    /**
     * Date.
     * @type {string}
     * @memberof LobbyingData
     */
    date?: string;
    /**
     * Client ID.
     * @type {string}
     * @memberof LobbyingData
     */
    clientId?: string;
    /**
     * Registrant ID.
     * @type {string}
     * @memberof LobbyingData
     */
    registrantId?: string;
    /**
     * Senate ID.
     * @type {string}
     * @memberof LobbyingData
     */
    senateId?: string;
    /**
     * House registrant ID.
     * @type {string}
     * @memberof LobbyingData
     */
    houseregistrantId?: string;
}
/**
 *
 * @export
 * @interface LobbyingResult
 */
export interface LobbyingResult {
    /**
     * Symbol.
     * @type {string}
     * @memberof LobbyingResult
     */
    symbol?: string;
    /**
     * Array of lobbying activities.
     * @type {Array<LobbyingData>}
     * @memberof LobbyingResult
     */
    data?: Array<LobbyingData>;
}
/**
 *
 * @export
 * @interface MarketNews
 */
export interface MarketNews {
    /**
     * News category.
     * @type {string}
     * @memberof MarketNews
     */
    category?: string;
    /**
     * Published time in UNIX timestamp.
     * @type {number}
     * @memberof MarketNews
     */
    datetime?: number;
    /**
     * News headline.
     * @type {string}
     * @memberof MarketNews
     */
    headline?: string;
    /**
     * News ID. This value can be used for <code>minId</code> params to get the latest news only.
     * @type {number}
     * @memberof MarketNews
     */
    id?: number;
    /**
     * Thumbnail image URL.
     * @type {string}
     * @memberof MarketNews
     */
    image?: string;
    /**
     * Related stocks and companies mentioned in the article.
     * @type {string}
     * @memberof MarketNews
     */
    related?: string;
    /**
     * News source.
     * @type {string}
     * @memberof MarketNews
     */
    source?: string;
    /**
     * News summary.
     * @type {string}
     * @memberof MarketNews
     */
    summary?: string;
    /**
     * URL of the original article.
     * @type {string}
     * @memberof MarketNews
     */
    url?: string;
}
/**
 *
 * @export
 * @interface MutualFundCountryExposure
 */
export interface MutualFundCountryExposure {
    /**
     * Symbol.
     * @type {string}
     * @memberof MutualFundCountryExposure
     */
    symbol?: string;
    /**
     * Array of countries and and exposure levels.
     * @type {Array<MutualFundCountryExposureData>}
     * @memberof MutualFundCountryExposure
     */
    countryExposure?: Array<MutualFundCountryExposureData>;
}
/**
 *
 * @export
 * @interface MutualFundCountryExposureData
 */
export interface MutualFundCountryExposureData {
    /**
     * Country
     * @type {string}
     * @memberof MutualFundCountryExposureData
     */
    country?: string;
    /**
     * Percent of exposure.
     * @type {number}
     * @memberof MutualFundCountryExposureData
     */
    exposure?: number;
}
/**
 *
 * @export
 * @interface MutualFundHoldings
 */
export interface MutualFundHoldings {
    /**
     * Symbol.
     * @type {string}
     * @memberof MutualFundHoldings
     */
    symbol?: string;
    /**
     * Holdings update date.
     * @type {string}
     * @memberof MutualFundHoldings
     */
    atDate?: string;
    /**
     * Number of holdings.
     * @type {number}
     * @memberof MutualFundHoldings
     */
    numberOfHoldings?: number;
    /**
     * Array of holdings.
     * @type {Array<MutualFundHoldingsData>}
     * @memberof MutualFundHoldings
     */
    holdings?: Array<MutualFundHoldingsData>;
}
/**
 *
 * @export
 * @interface MutualFundHoldingsData
 */
export interface MutualFundHoldingsData {
    /**
     * Symbol description
     * @type {string}
     * @memberof MutualFundHoldingsData
     */
    symbol?: string;
    /**
     * Security name
     * @type {string}
     * @memberof MutualFundHoldingsData
     */
    name?: string;
    /**
     * ISIN.
     * @type {string}
     * @memberof MutualFundHoldingsData
     */
    isin?: string;
    /**
     * CUSIP.
     * @type {string}
     * @memberof MutualFundHoldingsData
     */
    cusip?: string;
    /**
     * Number of shares.
     * @type {number}
     * @memberof MutualFundHoldingsData
     */
    share?: number;
    /**
     * Portfolio\'s percent
     * @type {number}
     * @memberof MutualFundHoldingsData
     */
    percent?: number;
    /**
     * Market value
     * @type {number}
     * @memberof MutualFundHoldingsData
     */
    value?: number;
}
/**
 *
 * @export
 * @interface MutualFundProfile
 */
export interface MutualFundProfile {
    /**
     * Symbol.
     * @type {string}
     * @memberof MutualFundProfile
     */
    symbol?: string;
    /**
     *
     * @type {MutualFundProfileData}
     * @memberof MutualFundProfile
     */
    profile?: MutualFundProfileData;
}
/**
 *
 * @export
 * @interface MutualFundProfileData
 */
export interface MutualFundProfileData {
    /**
     * Name
     * @type {string}
     * @memberof MutualFundProfileData
     */
    name?: string;
    /**
     * Fund\'s category.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    category?: string;
    /**
     * Investment Segment.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    investmentSegment?: string;
    /**
     * NAV.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    totalNav?: number;
    /**
     * Expense ratio.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    expenseRatio?: number;
    /**
     * Index benchmark.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    benchmark?: string;
    /**
     * Inception date.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    inceptionDate?: string;
    /**
     * Fund\'s description.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    description?: string;
    /**
     * Fund Family.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    fundFamily?: string;
    /**
     * Fund\'s managers.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    manager?: string;
    /**
     * Status.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    status?: string;
    /**
     * Beta.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    beta?: number;
    /**
     * Deferred load.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    deferredLoad?: number;
    /**
     * 12B-1 fee.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    fee12b1?: number;
    /**
     * Front Load.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    frontLoad?: number;
    /**
     * IRA minimum investment.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    iraMinInvestment?: number;
    /**
     * ISIN.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    isin?: string;
    /**
     * CUSIP.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    cusip?: string;
    /**
     * Max redemption fee.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    maxRedemptionFee?: number;
    /**
     * Minimum investment for standard accounts.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    standardMinInvestment?: number;
    /**
     * Turnover.
     * @type {number}
     * @memberof MutualFundProfileData
     */
    turnover?: number;
    /**
     * Fund\'s series ID. This field can be used to group multiple share classes into 1 unique fund.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    seriesId?: string;
    /**
     * Fund\'s series name.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    seriesName?: string;
    /**
     * Class ID.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    classId?: string;
    /**
     * Class name.
     * @type {string}
     * @memberof MutualFundProfileData
     */
    className?: string;
}
/**
 *
 * @export
 * @interface MutualFundSectorExposure
 */
export interface MutualFundSectorExposure {
    /**
     * Mutual symbol.
     * @type {string}
     * @memberof MutualFundSectorExposure
     */
    symbol?: string;
    /**
     * Array of sector and exposure levels.
     * @type {Array<MutualFundSectorExposureData>}
     * @memberof MutualFundSectorExposure
     */
    sectorExposure?: Array<MutualFundSectorExposureData>;
}
/**
 *
 * @export
 * @interface MutualFundSectorExposureData
 */
export interface MutualFundSectorExposureData {
    /**
     * Sector
     * @type {string}
     * @memberof MutualFundSectorExposureData
     */
    sector?: string;
    /**
     * Percent of exposure.
     * @type {number}
     * @memberof MutualFundSectorExposureData
     */
    exposure?: number;
}
/**
 *
 * @export
 * @interface NewsSentiment
 */
export interface NewsSentiment {
    /**
     *
     * @type {CompanyNewsStatistics}
     * @memberof NewsSentiment
     */
    buzz?: CompanyNewsStatistics;
    /**
     * News score.
     * @type {number}
     * @memberof NewsSentiment
     */
    companyNewsScore?: number;
    /**
     * Sector average bullish percent.
     * @type {number}
     * @memberof NewsSentiment
     */
    sectorAverageBullishPercent?: number;
    /**
     * Sectore average score.
     * @type {number}
     * @memberof NewsSentiment
     */
    sectorAverageNewsScore?: number;
    /**
     *
     * @type {Sentiment}
     * @memberof NewsSentiment
     */
    sentiment?: Sentiment;
    /**
     * Requested symbol.
     * @type {string}
     * @memberof NewsSentiment
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface Ownership
 */
export interface Ownership {
    /**
     * Symbol of the company.
     * @type {string}
     * @memberof Ownership
     */
    symbol?: string;
    /**
     * Array of investors with detailed information about their holdings.
     * @type {Array<OwnershipInfo>}
     * @memberof Ownership
     */
    ownership?: Array<OwnershipInfo>;
}
/**
 *
 * @export
 * @interface OwnershipInfo
 */
export interface OwnershipInfo {
    /**
     * Investor\'s name.
     * @type {string}
     * @memberof OwnershipInfo
     */
    name?: string;
    /**
     * Number of shares held by the investor.
     * @type {number}
     * @memberof OwnershipInfo
     */
    share?: number;
    /**
     * Number of share changed (net buy or sell) from the last period.
     * @type {number}
     * @memberof OwnershipInfo
     */
    change?: number;
    /**
     * Filing date.
     * @type {string}
     * @memberof OwnershipInfo
     */
    filingDate?: string;
}
/**
 *
 * @export
 * @interface PatternRecognition
 */
export interface PatternRecognition {
    /**
     * Array of patterns.
     * @type {Array<object>}
     * @memberof PatternRecognition
     */
    points?: Array<object>;
}
/**
 *
 * @export
 * @interface PressRelease
 */
export interface PressRelease {
    /**
     * Company symbol.
     * @type {string}
     * @memberof PressRelease
     */
    symbol?: string;
    /**
     * Array of major developments.
     * @type {Array<Development>}
     * @memberof PressRelease
     */
    majorDevelopment?: Array<Development>;
}
/**
 *
 * @export
 * @interface PriceTarget
 */
export interface PriceTarget {
    /**
     * Company symbol.
     * @type {string}
     * @memberof PriceTarget
     */
    symbol?: string;
    /**
     * Highes analysts\' target.
     * @type {number}
     * @memberof PriceTarget
     */
    targetHigh?: number;
    /**
     * Lowest analysts\' target.
     * @type {number}
     * @memberof PriceTarget
     */
    targetLow?: number;
    /**
     * Mean of all analysts\' targets.
     * @type {number}
     * @memberof PriceTarget
     */
    targetMean?: number;
    /**
     * Median of all analysts\' targets.
     * @type {number}
     * @memberof PriceTarget
     */
    targetMedian?: number;
    /**
     * Updated time of the data
     * @type {string}
     * @memberof PriceTarget
     */
    lastUpdated?: string;
}
/**
 *
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * Open price of the day
     * @type {number}
     * @memberof Quote
     */
    o?: number;
    /**
     * High price of the day
     * @type {number}
     * @memberof Quote
     */
    h?: number;
    /**
     * Low price of the day
     * @type {number}
     * @memberof Quote
     */
    l?: number;
    /**
     * Current price
     * @type {number}
     * @memberof Quote
     */
    c?: number;
    /**
     * Previous close price
     * @type {number}
     * @memberof Quote
     */
    pc?: number;
    /**
     * Change
     * @type {number}
     * @memberof Quote
     */
    d?: number;
    /**
     * Percent change
     * @type {number}
     * @memberof Quote
     */
    dp?: number;
}
/**
 *
 * @export
 * @interface RecommendationTrend
 */
export interface RecommendationTrend {
    /**
     * Company symbol.
     * @type {string}
     * @memberof RecommendationTrend
     */
    symbol?: string;
    /**
     * Number of recommendations that fall into the Buy category
     * @type {number}
     * @memberof RecommendationTrend
     */
    buy?: number;
    /**
     * Number of recommendations that fall into the Hold category
     * @type {number}
     * @memberof RecommendationTrend
     */
    hold?: number;
    /**
     * Updated period
     * @type {string}
     * @memberof RecommendationTrend
     */
    period?: string;
    /**
     * Number of recommendations that fall into the Sell category
     * @type {number}
     * @memberof RecommendationTrend
     */
    sell?: number;
    /**
     * Number of recommendations that fall into the Strong Buy category
     * @type {number}
     * @memberof RecommendationTrend
     */
    strongBuy?: number;
    /**
     * Number of recommendations that fall into the Strong Sell category
     * @type {number}
     * @memberof RecommendationTrend
     */
    strongSell?: number;
}
/**
 *
 * @export
 * @interface RedditSentimentContent
 */
export interface RedditSentimentContent {
    /**
     * Number of mentions
     * @type {number}
     * @memberof RedditSentimentContent
     */
    mention?: number;
    /**
     * Number of positive mentions
     * @type {number}
     * @memberof RedditSentimentContent
     */
    positiveMention?: number;
    /**
     * Number of negative mentions
     * @type {number}
     * @memberof RedditSentimentContent
     */
    negativeMention?: number;
    /**
     * Positive score. Range 0-1
     * @type {number}
     * @memberof RedditSentimentContent
     */
    positiveScore?: number;
    /**
     * Negative score. Range 0-1
     * @type {number}
     * @memberof RedditSentimentContent
     */
    negativeScore?: number;
    /**
     * Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative
     * @type {number}
     * @memberof RedditSentimentContent
     */
    score?: number;
    /**
     * Period.
     * @type {string}
     * @memberof RedditSentimentContent
     */
    atTime?: string;
}
/**
 *
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * Access number.
     * @type {string}
     * @memberof Report
     */
    accessNumber?: string;
    /**
     * Symbol.
     * @type {string}
     * @memberof Report
     */
    symbol?: string;
    /**
     * CIK.
     * @type {string}
     * @memberof Report
     */
    cik?: string;
    /**
     * Year.
     * @type {number}
     * @memberof Report
     */
    year?: number;
    /**
     * Quarter.
     * @type {number}
     * @memberof Report
     */
    quarter?: number;
    /**
     * Form type.
     * @type {string}
     * @memberof Report
     */
    form?: string;
    /**
     * Period start date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof Report
     */
    startDate?: string;
    /**
     * Period end date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof Report
     */
    endDate?: string;
    /**
     * Filed date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof Report
     */
    filedDate?: string;
    /**
     * Accepted date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof Report
     */
    acceptedDate?: string;
    /**
     *
     * @type {object}
     * @memberof Report
     */
    report?: object;
}
/**
 *
 * @export
 * @interface RevenueBreakdown
 */
export interface RevenueBreakdown {
    /**
     * Symbol
     * @type {string}
     * @memberof RevenueBreakdown
     */
    symbol?: string;
    /**
     * CIK
     * @type {string}
     * @memberof RevenueBreakdown
     */
    cik?: string;
    /**
     * Array of revenue breakdown over multiple periods.
     * @type {Array<BreakdownItem>}
     * @memberof RevenueBreakdown
     */
    data?: Array<BreakdownItem>;
}
/**
 *
 * @export
 * @interface RevenueEstimates
 */
export interface RevenueEstimates {
    /**
     * List of estimates
     * @type {Array<RevenueEstimatesInfo>}
     * @memberof RevenueEstimates
     */
    data?: Array<RevenueEstimatesInfo>;
    /**
     * Frequency: annual or quarterly.
     * @type {string}
     * @memberof RevenueEstimates
     */
    freq?: string;
    /**
     * Company symbol.
     * @type {string}
     * @memberof RevenueEstimates
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface RevenueEstimatesInfo
 */
export interface RevenueEstimatesInfo {
    /**
     * Average revenue estimates including Finnhub\'s proprietary estimates.
     * @type {number}
     * @memberof RevenueEstimatesInfo
     */
    revenueAvg?: number;
    /**
     * Highest estimate.
     * @type {number}
     * @memberof RevenueEstimatesInfo
     */
    revenueHigh?: number;
    /**
     * Lowest estimate.
     * @type {number}
     * @memberof RevenueEstimatesInfo
     */
    revenueLow?: number;
    /**
     * Number of Analysts.
     * @type {number}
     * @memberof RevenueEstimatesInfo
     */
    numberAnalysts?: number;
    /**
     * Period.
     * @type {string}
     * @memberof RevenueEstimatesInfo
     */
    period?: string;
}
/**
 *
 * @export
 * @interface SECSentimentAnalysis
 */
export interface SECSentimentAnalysis {
    /**
     * Access number.
     * @type {string}
     * @memberof SECSentimentAnalysis
     */
    accessNumber?: string;
    /**
     * Symbol.
     * @type {string}
     * @memberof SECSentimentAnalysis
     */
    symbol?: string;
    /**
     * CIK.
     * @type {string}
     * @memberof SECSentimentAnalysis
     */
    cik?: string;
    /**
     *
     * @type {FilingSentiment}
     * @memberof SECSentimentAnalysis
     */
    sentiment?: FilingSentiment;
}
/**
 *
 * @export
 * @interface Sentiment
 */
export interface Sentiment {
    /**
     *
     * @type {number}
     * @memberof Sentiment
     */
    bearishPercent?: number;
    /**
     *
     * @type {number}
     * @memberof Sentiment
     */
    bullishPercent?: number;
}
/**
 *
 * @export
 * @interface SimilarityIndex
 */
export interface SimilarityIndex {
    /**
     * Symbol.
     * @type {string}
     * @memberof SimilarityIndex
     */
    symbol?: string;
    /**
     * CIK.
     * @type {string}
     * @memberof SimilarityIndex
     */
    cik?: string;
    /**
     * Array of filings with its cosine similarity compared to the same report of the previous year.
     * @type {Array<SimilarityIndexInfo>}
     * @memberof SimilarityIndex
     */
    similarity?: Array<SimilarityIndexInfo>;
}
/**
 *
 * @export
 * @interface SimilarityIndexInfo
 */
export interface SimilarityIndexInfo {
    /**
     * CIK.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    cik?: string;
    /**
     * Cosine similarity of Item 1 (Business). This number is only available for Annual reports.
     * @type {number}
     * @memberof SimilarityIndexInfo
     */
    item1?: number;
    /**
     * Cosine similarity of Item 1A (Risk Factors). This number is available for both Annual and Quarterly reports.
     * @type {number}
     * @memberof SimilarityIndexInfo
     */
    item1a?: number;
    /**
     * Cosine similarity of Item 2 (Management’s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Quarterly reports.
     * @type {number}
     * @memberof SimilarityIndexInfo
     */
    item2?: number;
    /**
     * Cosine similarity of Item 7 (Management’s Discussion and Analysis of Financial Condition and Results of Operations). This number is only available for Annual reports.
     * @type {number}
     * @memberof SimilarityIndexInfo
     */
    item7?: number;
    /**
     * Cosine similarity of Item 7A (Quantitative and Qualitative Disclosures About Market Risk). This number is only available for Annual reports.
     * @type {number}
     * @memberof SimilarityIndexInfo
     */
    item7a?: number;
    /**
     * Access number.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    accessNumber?: string;
    /**
     * Form type.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    form?: string;
    /**
     * Filed date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    filedDate?: string;
    /**
     * Accepted date <code>%Y-%m-%d %H:%M:%S</code>.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    acceptedDate?: string;
    /**
     * Report\'s URL.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    reportUrl?: string;
    /**
     * Filing\'s URL.
     * @type {string}
     * @memberof SimilarityIndexInfo
     */
    filingUrl?: string;
}
/**
 *
 * @export
 * @interface SocialSentiment
 */
export interface SocialSentiment {
    /**
     * Company symbol.
     * @type {string}
     * @memberof SocialSentiment
     */
    symbol?: string;
    /**
     * Reddit sentiment.
     * @type {Array<RedditSentimentContent>}
     * @memberof SocialSentiment
     */
    reddit?: Array<RedditSentimentContent>;
    /**
     * Twitter sentiment.
     * @type {Array<TwitterSentimentContent>}
     * @memberof SocialSentiment
     */
    twitter?: Array<TwitterSentimentContent>;
}
/**
 *
 * @export
 * @interface Split
 */
export interface Split {
    /**
     * Symbol.
     * @type {string}
     * @memberof Split
     */
    symbol?: string;
    /**
     * Split date.
     * @type {string}
     * @memberof Split
     */
    date?: string;
    /**
     * From factor.
     * @type {number}
     * @memberof Split
     */
    fromFactor?: number;
    /**
     * To factor.
     * @type {number}
     * @memberof Split
     */
    toFactor?: number;
}
/**
 *
 * @export
 * @interface StockCandles
 */
export interface StockCandles {
    /**
     * List of open prices for returned candles.
     * @type {Array<number>}
     * @memberof StockCandles
     */
    o?: Array<number>;
    /**
     * List of high prices for returned candles.
     * @type {Array<number>}
     * @memberof StockCandles
     */
    h?: Array<number>;
    /**
     * List of low prices for returned candles.
     * @type {Array<number>}
     * @memberof StockCandles
     */
    l?: Array<number>;
    /**
     * List of close prices for returned candles.
     * @type {Array<number>}
     * @memberof StockCandles
     */
    c?: Array<number>;
    /**
     * List of volume data for returned candles.
     * @type {Array<number>}
     * @memberof StockCandles
     */
    v?: Array<number>;
    /**
     * List of timestamp for returned candles.
     * @type {Array<number>}
     * @memberof StockCandles
     */
    t?: Array<number>;
    /**
     * Status of the response. This field can either be ok or no_data.
     * @type {string}
     * @memberof StockCandles
     */
    s?: string;
}
/**
 *
 * @export
 * @interface StockSymbol
 */
export interface StockSymbol {
    /**
     * Symbol description
     * @type {string}
     * @memberof StockSymbol
     */
    description?: string;
    /**
     * Display symbol name.
     * @type {string}
     * @memberof StockSymbol
     */
    displaySymbol?: string;
    /**
     * Unique symbol used to identify this symbol used in <code>/stock/candle</code> endpoint.
     * @type {string}
     * @memberof StockSymbol
     */
    symbol?: string;
    /**
     * Security type.
     * @type {string}
     * @memberof StockSymbol
     */
    type?: string;
    /**
     * Primary exchange\'s MIC.
     * @type {string}
     * @memberof StockSymbol
     */
    mic?: string;
    /**
     * FIGI identifier.
     * @type {string}
     * @memberof StockSymbol
     */
    figi?: string;
    /**
     * Global Share Class FIGI.
     * @type {string}
     * @memberof StockSymbol
     */
    shareClassFIGI?: string;
    /**
     * Price\'s currency. This might be different from the reporting currency of fundamental data.
     * @type {string}
     * @memberof StockSymbol
     */
    currency?: string;
    /**
     * Alternative ticker for exchanges with multiple tickers for 1 stock such as BSE.
     * @type {string}
     * @memberof StockSymbol
     */
    symbol2?: string;
    /**
     * ISIN. This field is only available for EU stocks and selected Asian markets. Entitlement from Finnhub is required to access this field.
     * @type {string}
     * @memberof StockSymbol
     */
    isin?: string;
}
/**
 *
 * @export
 * @interface StockTranscripts
 */
export interface StockTranscripts {
    /**
     * Transcript\'s ID used to get the <a href=\"#transcripts\">full transcript</a>.
     * @type {string}
     * @memberof StockTranscripts
     */
    id?: string;
    /**
     * Title.
     * @type {string}
     * @memberof StockTranscripts
     */
    title?: string;
    /**
     * Time of the event.
     * @type {string}
     * @memberof StockTranscripts
     */
    time?: string;
    /**
     * Year of earnings result in the case of earnings call transcript.
     * @type {number}
     * @memberof StockTranscripts
     */
    year?: number;
    /**
     * Quarter of earnings result in the case of earnings call transcript.
     * @type {number}
     * @memberof StockTranscripts
     */
    quarter?: number;
}
/**
 *
 * @export
 * @interface SupplyChainRelationships
 */
export interface SupplyChainRelationships {
    /**
     * symbol
     * @type {string}
     * @memberof SupplyChainRelationships
     */
    symbol?: string;
    /**
     * Key customers and suppliers.
     * @type {Array<KeyCustomersSuppliers>}
     * @memberof SupplyChainRelationships
     */
    data?: Array<KeyCustomersSuppliers>;
}
/**
 *
 * @export
 * @interface SupportResistance
 */
export interface SupportResistance {
    /**
     * Array of support and resistance levels.
     * @type {Array<number>}
     * @memberof SupportResistance
     */
    levels?: Array<number>;
}
/**
 *
 * @export
 * @interface SymbolLookup
 */
export interface SymbolLookup {
    /**
     * Array of search results.
     * @type {Array<SymbolLookupInfo>}
     * @memberof SymbolLookup
     */
    result?: Array<SymbolLookupInfo>;
    /**
     * Number of results.
     * @type {number}
     * @memberof SymbolLookup
     */
    count?: number;
}
/**
 *
 * @export
 * @interface SymbolLookupInfo
 */
export interface SymbolLookupInfo {
    /**
     * Symbol description
     * @type {string}
     * @memberof SymbolLookupInfo
     */
    description?: string;
    /**
     * Display symbol name.
     * @type {string}
     * @memberof SymbolLookupInfo
     */
    displaySymbol?: string;
    /**
     * Unique symbol used to identify this symbol used in <code>/stock/candle</code> endpoint.
     * @type {string}
     * @memberof SymbolLookupInfo
     */
    symbol?: string;
    /**
     * Security type.
     * @type {string}
     * @memberof SymbolLookupInfo
     */
    type?: string;
}
/**
 *
 * @export
 * @interface TechnicalAnalysis
 */
export interface TechnicalAnalysis {
    /**
     *
     * @type {Indicator}
     * @memberof TechnicalAnalysis
     */
    count?: Indicator;
    /**
     * Aggregate Signal
     * @type {string}
     * @memberof TechnicalAnalysis
     */
    signal?: string;
}
/**
 *
 * @export
 * @interface TickData
 */
export interface TickData {
    /**
     * Symbol.
     * @type {string}
     * @memberof TickData
     */
    s?: string;
    /**
     * Number of ticks skipped.
     * @type {number}
     * @memberof TickData
     */
    skip?: number;
    /**
     * Number of ticks returned. If <code>count</code> < <code>limit</code>, all data for that date has been returned.
     * @type {number}
     * @memberof TickData
     */
    count?: number;
    /**
     * Total number of ticks for that date.
     * @type {number}
     * @memberof TickData
     */
    total?: number;
    /**
     * List of volume data.
     * @type {Array<number>}
     * @memberof TickData
     */
    v?: Array<number>;
    /**
     * List of price data.
     * @type {Array<number>}
     * @memberof TickData
     */
    p?: Array<number>;
    /**
     * List of timestamp in UNIX ms.
     * @type {Array<number>}
     * @memberof TickData
     */
    t?: Array<number>;
    /**
     * List of venues/exchanges. A list of exchange codes can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1Tj53M1svmr-hfEtbk6_NpVR1yAyGLMaH6ByYU6CG0ZY/edit?usp=sharing\",>here</a>
     * @type {Array<string>}
     * @memberof TickData
     */
    x?: Array<string>;
    /**
     * List of trade conditions. A comprehensive list of trade conditions code can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1PUxiSWPHSODbaTaoL2Vef6DgU-yFtlRGZf19oBb9Hp0/edit?usp=sharing\">here</a>
     * @type {Array<Array<string>>}
     * @memberof TickData
     */
    c?: Array<Array<string>>;
}
/**
 *
 * @export
 * @interface Transactions
 */
export interface Transactions {
    /**
     * Symbol.
     * @type {string}
     * @memberof Transactions
     */
    symbol?: string;
    /**
     * Insider\'s name.
     * @type {string}
     * @memberof Transactions
     */
    name?: string;
    /**
     * Number of shares held after the transaction.
     * @type {number}
     * @memberof Transactions
     */
    share?: number;
    /**
     * Number of share changed from the last period. A positive value suggests a <code>BUY</code> transaction. A negative value suggests a <code>SELL</code> transaction.
     * @type {number}
     * @memberof Transactions
     */
    change?: number;
    /**
     * Filing date.
     * @type {string}
     * @memberof Transactions
     */
    filingDate?: string;
    /**
     * Transaction date.
     * @type {string}
     * @memberof Transactions
     */
    transactionDate?: string;
    /**
     * Average transaction price.
     * @type {number}
     * @memberof Transactions
     */
    transactionPrice?: number;
    /**
     * Transaction code. A list of codes and their meanings can be found <a href=\"https://www.sec.gov/about/forms/form4data.pdf\" target=\"_blank\" rel=\"noopener\">here</a>.
     * @type {string}
     * @memberof Transactions
     */
    transactionCode?: string;
}
/**
 *
 * @export
 * @interface TranscriptContent
 */
export interface TranscriptContent {
    /**
     * Speaker\'s name
     * @type {string}
     * @memberof TranscriptContent
     */
    name?: string;
    /**
     * Speaker\'s speech
     * @type {Array<string>}
     * @memberof TranscriptContent
     */
    speech?: Array<string>;
    /**
     * Earnings calls section (management discussion or Q&A)
     * @type {string}
     * @memberof TranscriptContent
     */
    session?: string;
}
/**
 *
 * @export
 * @interface TranscriptParticipant
 */
export interface TranscriptParticipant {
    /**
     * Participant\'s name
     * @type {string}
     * @memberof TranscriptParticipant
     */
    name?: string;
    /**
     * Participant\'s description
     * @type {string}
     * @memberof TranscriptParticipant
     */
    description?: string;
    /**
     * Whether the speak is a company\'s executive or an analyst
     * @type {string}
     * @memberof TranscriptParticipant
     */
    role?: string;
}
/**
 *
 * @export
 * @interface Trend
 */
export interface Trend {
    /**
     * ADX reading
     * @type {number}
     * @memberof Trend
     */
    adx?: number;
    /**
     * Whether market is trending or going sideway
     * @type {boolean}
     * @memberof Trend
     */
    trending?: boolean;
}
/**
 *
 * @export
 * @interface TwitterSentimentContent
 */
export interface TwitterSentimentContent {
    /**
     * Number of mentions
     * @type {number}
     * @memberof TwitterSentimentContent
     */
    mention?: number;
    /**
     * Number of positive mentions
     * @type {number}
     * @memberof TwitterSentimentContent
     */
    positiveMention?: number;
    /**
     * Number of negative mentions
     * @type {number}
     * @memberof TwitterSentimentContent
     */
    negativeMention?: number;
    /**
     * Positive score. Range 0-1
     * @type {number}
     * @memberof TwitterSentimentContent
     */
    positiveScore?: number;
    /**
     * Negative score. Range 0-1
     * @type {number}
     * @memberof TwitterSentimentContent
     */
    negativeScore?: number;
    /**
     * Final score. Range: -1 to 1 with 1 is very positive and -1 is very negative
     * @type {number}
     * @memberof TwitterSentimentContent
     */
    score?: number;
    /**
     * Period.
     * @type {string}
     * @memberof TwitterSentimentContent
     */
    atTime?: string;
}
/**
 *
 * @export
 * @interface UpgradeDowngrade
 */
export interface UpgradeDowngrade {
    /**
     * Company symbol.
     * @type {string}
     * @memberof UpgradeDowngrade
     */
    symbol?: string;
    /**
     * Upgrade/downgrade time in UNIX timestamp.
     * @type {number}
     * @memberof UpgradeDowngrade
     */
    gradeTime?: number;
    /**
     * From grade.
     * @type {string}
     * @memberof UpgradeDowngrade
     */
    fromGrade?: string;
    /**
     * To grade.
     * @type {string}
     * @memberof UpgradeDowngrade
     */
    toGrade?: string;
    /**
     * Company/analyst who did the upgrade/downgrade.
     * @type {string}
     * @memberof UpgradeDowngrade
     */
    company?: string;
    /**
     * Action can take any of the following values: <code>up(upgrade), down(downgrade), main(maintains), init(initiate), reit(reiterate)</code>.
     * @type {string}
     * @memberof UpgradeDowngrade
     */
    action?: string;
}
/**
 *
 * @export
 * @interface UsaSpending
 */
export interface UsaSpending {
    /**
     * Symbol.
     * @type {string}
     * @memberof UsaSpending
     */
    symbol?: string;
    /**
     * Company\'s name.
     * @type {string}
     * @memberof UsaSpending
     */
    recipientName?: string;
    /**
     * Company\'s name.
     * @type {string}
     * @memberof UsaSpending
     */
    recipientParentName?: string;
    /**
     * Description.
     * @type {string}
     * @memberof UsaSpending
     */
    awardDescription?: string;
    /**
     * Recipient\'s country.
     * @type {string}
     * @memberof UsaSpending
     */
    country?: string;
    /**
     * Period.
     * @type {string}
     * @memberof UsaSpending
     */
    actionDate?: string;
    /**
     * Income reported by lobbying firms.
     * @type {number}
     * @memberof UsaSpending
     */
    totalValue?: number;
    /**
     * Performance start date.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceStartDate?: string;
    /**
     * Performance end date.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceEndDate?: string;
    /**
     * Award agency.
     * @type {string}
     * @memberof UsaSpending
     */
    awardingAgencyName?: string;
    /**
     * Award sub-agency.
     * @type {string}
     * @memberof UsaSpending
     */
    awardingSubAgencyName?: string;
    /**
     * Award office name.
     * @type {string}
     * @memberof UsaSpending
     */
    awardingOfficeName?: string;
    /**
     * Performance country.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceCountry?: string;
    /**
     * Performance city.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceCity?: string;
    /**
     * Performance county.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceCounty?: string;
    /**
     * Performance state.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceState?: string;
    /**
     * Performance zip code.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceZipCode?: string;
    /**
     * Performance congressional district.
     * @type {string}
     * @memberof UsaSpending
     */
    performanceCongressionalDistrict?: string;
    /**
     * NAICS code.
     * @type {string}
     * @memberof UsaSpending
     */
    naicsCode?: string;
    /**
     * Permalink.
     * @type {string}
     * @memberof UsaSpending
     */
    permalink?: string;
}
/**
 *
 * @export
 * @interface UsaSpendingResult
 */
export interface UsaSpendingResult {
    /**
     * Symbol.
     * @type {string}
     * @memberof UsaSpendingResult
     */
    symbol?: string;
    /**
     * Array of government\'s spending data points.
     * @type {Array<UsaSpending>}
     * @memberof UsaSpendingResult
     */
    data?: Array<UsaSpending>;
}
/**
 *
 * @export
 * @interface UsptoPatent
 */
export interface UsptoPatent {
    /**
     * Application Number.
     * @type {string}
     * @memberof UsptoPatent
     */
    applicationNumber?: string;
    /**
     * Array of companies\' name on the patent.
     * @type {Array<string>}
     * @memberof UsptoPatent
     */
    companyFilingName?: Array<string>;
    /**
     * Filing date.
     * @type {string}
     * @memberof UsptoPatent
     */
    filingDate?: string;
    /**
     * Description.
     * @type {string}
     * @memberof UsptoPatent
     */
    description?: string;
    /**
     * Filing status.
     * @type {string}
     * @memberof UsptoPatent
     */
    filingStatus?: string;
    /**
     * Patent number.
     * @type {string}
     * @memberof UsptoPatent
     */
    patentNumber?: string;
    /**
     * Publication date.
     * @type {string}
     * @memberof UsptoPatent
     */
    publicationDate?: string;
    /**
     * Patent\'s type.
     * @type {string}
     * @memberof UsptoPatent
     */
    patentType?: string;
    /**
     * URL of the original article.
     * @type {string}
     * @memberof UsptoPatent
     */
    url?: string;
}
/**
 *
 * @export
 * @interface UsptoPatentResult
 */
export interface UsptoPatentResult {
    /**
     * Symbol.
     * @type {string}
     * @memberof UsptoPatentResult
     */
    symbol?: string;
    /**
     * Array of patents.
     * @type {Array<UsptoPatent>}
     * @memberof UsptoPatentResult
     */
    data?: Array<UsptoPatent>;
}
/**
 *
 * @export
 * @interface VisaApplication
 */
export interface VisaApplication {
    /**
     * Year.
     * @type {number}
     * @memberof VisaApplication
     */
    year?: number;
    /**
     * Quarter.
     * @type {number}
     * @memberof VisaApplication
     */
    quarter?: number;
    /**
     * Symbol.
     * @type {string}
     * @memberof VisaApplication
     */
    symbol?: string;
    /**
     * Case number.
     * @type {string}
     * @memberof VisaApplication
     */
    caseNumber?: string;
    /**
     * Case status.
     * @type {string}
     * @memberof VisaApplication
     */
    caseStatus?: string;
    /**
     * Received date.
     * @type {string}
     * @memberof VisaApplication
     */
    receivedDate?: string;
    /**
     * Visa class.
     * @type {string}
     * @memberof VisaApplication
     */
    visaClass?: string;
    /**
     * Job Title.
     * @type {string}
     * @memberof VisaApplication
     */
    jobTitle?: string;
    /**
     * SOC Code. A list of SOC code can be found <a href=\"https://www.bls.gov/oes/current/oes_stru.htm\" target=\"_blank\">here</a>.
     * @type {string}
     * @memberof VisaApplication
     */
    socCode?: string;
    /**
     * Full-time position flag.
     * @type {string}
     * @memberof VisaApplication
     */
    fullTimePosition?: string;
    /**
     * Job\'s start date.
     * @type {string}
     * @memberof VisaApplication
     */
    beginDate?: string;
    /**
     * Job\'s end date.
     * @type {string}
     * @memberof VisaApplication
     */
    endDate?: string;
    /**
     * Company\'s name.
     * @type {string}
     * @memberof VisaApplication
     */
    employerName?: string;
    /**
     * Worksite address.
     * @type {string}
     * @memberof VisaApplication
     */
    worksiteAddress?: string;
    /**
     * Worksite city.
     * @type {string}
     * @memberof VisaApplication
     */
    worksiteCity?: string;
    /**
     * Worksite county.
     * @type {string}
     * @memberof VisaApplication
     */
    worksiteCounty?: string;
    /**
     * Worksite state.
     * @type {string}
     * @memberof VisaApplication
     */
    worksiteState?: string;
    /**
     * Worksite postal code.
     * @type {string}
     * @memberof VisaApplication
     */
    worksitePostalCode?: string;
    /**
     * Wage range from.
     * @type {number}
     * @memberof VisaApplication
     */
    wageRangeFrom?: number;
    /**
     * Wage range to.
     * @type {number}
     * @memberof VisaApplication
     */
    wageRangeTo?: number;
    /**
     * Wage unit of pay.
     * @type {string}
     * @memberof VisaApplication
     */
    wageUnitOfPay?: string;
    /**
     * Wage level.
     * @type {string}
     * @memberof VisaApplication
     */
    wageLevel?: string;
    /**
     * H1B dependent flag.
     * @type {string}
     * @memberof VisaApplication
     */
    h1bDependent?: string;
}
/**
 *
 * @export
 * @interface VisaApplicationResult
 */
export interface VisaApplicationResult {
    /**
     * Symbol.
     * @type {string}
     * @memberof VisaApplicationResult
     */
    symbol?: string;
    /**
     * Array of H1b and Permanent visa applications.
     * @type {Array<VisaApplication>}
     * @memberof VisaApplicationResult
     */
    data?: Array<VisaApplication>;
}
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export declare const DefaultApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
     * @summary Aggregate Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateIndicator: (symbol: string, resolution: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get end-of-day bond\'s price data.
     * @summary Bond price data
     * @param {string} isin ISIN.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bondPrice: (isin: string, from: number, to: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
     * @summary Bond Profile
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {string} [figi] FIGI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bondProfile: (isin?: string, cusip?: string, figi?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     * @summary Basic Financials
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyBasicFinancials: (symbol: string, metric: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company historical quarterly earnings surprise going back to 2000.
     * @summary Earnings Surprises
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEarnings: (symbol: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
     * @summary Company Earnings Quality Score
     * @param {string} symbol Symbol.
     * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEarningsQualityScore: (symbol: string, freq: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company\'s ebit estimates.
     * @summary EBIT Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEbitEstimates: (symbol: string, freq?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company\'s ebitda estimates.
     * @summary EBITDA Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEbitdaEstimates: (symbol: string, freq?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company\'s EPS estimates.
     * @summary Earnings Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEpsEstimates: (symbol: string, freq?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
     * @summary Company ESG Scores
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEsgScore: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of company\'s executives and members of the Board.
     * @summary Company Executive
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyExecutive: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List latest company news by symbol. This endpoint is only available for North American companies.
     * @summary Company News
     * @param {string} symbol Company symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyNews: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company peers. Return a list of peers in the same country and sub-industry
     * @summary Peers
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyPeers: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     * @summary Company Profile
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyProfile: (symbol?: string, isin?: string, cusip?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
     * @summary Company Profile 2
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyProfile2: (symbol?: string, isin?: string, cusip?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company\'s revenue estimates.
     * @summary Revenue Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyRevenueEstimates: (symbol: string, freq?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all countries and metadata.
     * @summary Country Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    country: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
     * @summary COVID-19
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    covid19: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get candlestick data for crypto symbols.
     * @summary Crypto Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoCandles: (symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List supported crypto exchanges
     * @summary Crypto Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoExchanges: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get crypto\'s profile.
     * @summary Crypto Profile
     * @param {string} symbol Crypto symbol such as BTC or ETH.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoProfile: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List supported crypto symbols by exchange
     * @summary Crypto Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoSymbols: (exchange: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
     * @summary Earnings Calendar
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {string} [symbol] Filter by symbol: AAPL.
     * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    earningsCalendar: (from?: string, to?: string, symbol?: string, international?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
     * @summary Economic Calendar
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicCalendar: (from?: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List codes of supported economic data.
     * @summary Economic Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicCode: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get economic data.
     * @summary Economic Data
     * @param {string} code Economic code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicData: (code: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get ETF country exposure data.
     * @summary ETFs Country Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsCountryExposure: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
     * @summary ETFs Holdings
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsHoldings: (symbol?: string, isin?: string, skip?: number, date?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get ETF profile information. This endpoint has global coverage.
     * @summary ETFs Profile
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsProfile: (symbol?: string, isin?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get ETF sector exposure data.
     * @summary ETFs Sector Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsSectorExposure: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
     * @summary FDA Committee Meeting Calendar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fdaCommitteeMeetingCalendar: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
     * @summary SEC Filings
     * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
     * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filings: (symbol?: string, cik?: string, accessNumber?: string, form?: string, from?: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
     * @summary SEC Sentiment Analysis
     * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filingsSentiment: (accessNumber: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
     * @summary Financial Statements
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
     * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financials: (symbol: string, statement: string, freq: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
     * @summary Financials As Reported
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
     * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financialsReported: (symbol?: string, cik?: string, accessNumber?: string, freq?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get candlestick data for forex symbols.
     * @summary Forex Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexCandles: (symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List supported forex exchanges
     * @summary Forex Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexExchanges: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get rates for all forex pairs. Ideal for currency conversion
     * @summary Forex rates
     * @param {string} [base] Base currency. Default to EUR.
     * @param {string} [date] Date. Leave blank to get the latest data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexRates: (base?: string, date?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List supported forex symbols.
     * @summary Forex Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexSymbols: (exchange: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Fund Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fundOwnership: (symbol: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Indices Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indicesConstituents: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
     * @summary Indices Historical Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indicesHistoricalConstituents: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
     * @summary Insider Sentiment
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insiderSentiment: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
     * @summary Insider Transactions
     * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insiderTransactions: (symbol: string, from?: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
     * @summary International Filings
     * @param {string} [symbol] Symbol. Leave empty to list latest filings.
     * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    internationalFilings: (symbol?: string, country?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
     * @summary Investment Themes (Thematic Investing)
     * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    investmentThemes: (theme: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get recent and upcoming IPO.
     * @summary IPO Calendar
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipoCalendar: (from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get latest market news.
     * @summary Market News
     * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
     * @param {number} [minId] Use this field to get only news after this ID. Default to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketNews: (category: string, minId?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Mutual Funds country exposure data.
     * @summary Mutual Funds Country Exposure
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundCountryExposure: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Holdings
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundHoldings: (symbol?: string, isin?: string, skip?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Profile
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundProfile: (symbol?: string, isin?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get Mutual Funds sector exposure data.
     * @summary Mutual Funds Sector Exposure
     * @param {string} symbol Mutual Fund symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundSectorExposure: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
     * @summary News Sentiment
     * @param {string} symbol Company symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsSentiment: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ownership: (symbol: string, limit?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     * @summary Pattern Recognition
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patternRecognition: (symbol: string, resolution: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Major Press Releases
     * @param {string} symbol Company symbol.
     * @param {string} [from] From time: 2020-01-01.
     * @param {string} [to] To time: 2020-01-05.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressReleases: (symbol: string, from?: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get latest price target consensus.
     * @summary Price Target
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    priceTarget: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Quote
     * @param {string} symbol Symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quote: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get latest analyst recommendation trends for a company.
     * @summary Recommendation Trends
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recommendationTrends: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
     * @summary Revenue Breakdown
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revenueBreakdown: (symbol?: string, cik?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
     * @summary Similarity Index
     * @param {string} [symbol] Symbol. Required if cik is empty
     * @param {string} [cik] CIK. Required if symbol is empty
     * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarityIndex: (symbol?: string, cik?: string, freq?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
     * @summary Social Sentiment
     * @param {string} symbol Company symbol.
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialSentiment: (symbol: string, from?: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get global dividends data.
     * @summary Dividends 2 (Basic)
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockBasicDividends: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get last bid/ask data for US stocks.
     * @summary Last Bid-Ask
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockBidask: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
     * @summary Stock Candles
     * @param {string} symbol Symbol.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockCandles: (symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get dividends data for common stocks going back 30 years.
     * @summary Dividends
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockDividends: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of reported lobbying activities in the Senate and the House.
     * @summary Senate Lobbying
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockLobbying: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
     * @summary Historical NBBO
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockNbbo: (symbol: string, date: string, limit: number, skip: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get splits data for stocks.
     * @summary Splits
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockSplits: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Stock Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {string} [mic] Filter by MIC code.
     * @param {string} [securityType] Filter by security type used by OpenFigi standard.
     * @param {string} [currency] Filter by currency.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockSymbols: (exchange: string, mic?: string, securityType?: string, currency?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
     * @summary Tick Data
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockTick: (symbol: string, date: string, limit: number, skip: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
     * @summary USA Spending
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockUsaSpending: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List USPTO patents for companies. Limit to 250 records per API call.
     * @summary USPTO Patents
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockUsptoPatent: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
     * @summary H1-B Visa Application
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockVisaApplication: (symbol: string, from: string, to: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
     * @summary Supply Chain Relationships
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyChainRelationships: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get support and resistance levels for a symbol.
     * @summary Support/Resistance
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supportResistance: (symbol: string, resolution: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
     * @summary Symbol Lookup
     * @param {string} q Query text can be symbol, name, isin, or cusip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbolSearch: (q: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Technical Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    technicalIndicator: (symbol: string, resolution: string, from: number, to: number, indicator: string, indicatorFields?: object, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
     * @summary Earnings Call Transcripts
     * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transcripts: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
     * @summary Earnings Call Transcripts List
     * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transcriptsList: (symbol: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get latest stock upgrade and downgrade.
     * @summary Stock Upgrade/Downgrade
     * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
     * @param {string} [from] From date: 2000-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upgradeDowngrade: (symbol?: string, from?: string, to?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export declare const DefaultApiFp: (configuration?: Configuration) => {
    /**
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
     * @summary Aggregate Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateIndicator(symbol: string, resolution: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AggregateIndicators>>;
    /**
     * Get end-of-day bond\'s price data.
     * @summary Bond price data
     * @param {string} isin ISIN.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bondPrice(isin: string, from: number, to: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BondCandles>>;
    /**
     * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
     * @summary Bond Profile
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {string} [figi] FIGI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bondProfile(isin?: string, cusip?: string, figi?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BondProfile>>;
    /**
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     * @summary Basic Financials
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyBasicFinancials(symbol: string, metric: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicFinancials>>;
    /**
     * Get company historical quarterly earnings surprise going back to 2000.
     * @summary Earnings Surprises
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEarnings(symbol: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EarningResult>>>;
    /**
     * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
     * @summary Company Earnings Quality Score
     * @param {string} symbol Symbol.
     * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEarningsQualityScore(symbol: string, freq: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyEarningsQualityScore>>;
    /**
     * Get company\'s ebit estimates.
     * @summary EBIT Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEbitEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EbitEstimates>>;
    /**
     * Get company\'s ebitda estimates.
     * @summary EBITDA Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEbitdaEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EbitdaEstimates>>;
    /**
     * Get company\'s EPS estimates.
     * @summary Earnings Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEpsEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsEstimates>>;
    /**
     * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
     * @summary Company ESG Scores
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEsgScore(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyESG>>;
    /**
     * Get a list of company\'s executives and members of the Board.
     * @summary Company Executive
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyExecutive(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyExecutive>>;
    /**
     * List latest company news by symbol. This endpoint is only available for North American companies.
     * @summary Company News
     * @param {string} symbol Company symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyNews(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyNews>>>;
    /**
     * Get company peers. Return a list of peers in the same country and sub-industry
     * @summary Peers
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyPeers(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     * @summary Company Profile
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyProfile(symbol?: string, isin?: string, cusip?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyProfile>>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
     * @summary Company Profile 2
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyProfile2(symbol?: string, isin?: string, cusip?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyProfile2>>;
    /**
     * Get company\'s revenue estimates.
     * @summary Revenue Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyRevenueEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevenueEstimates>>;
    /**
     * List all countries and metadata.
     * @summary Country Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    country(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CountryMetadata>>>;
    /**
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
     * @summary COVID-19
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    covid19(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CovidInfo>>>;
    /**
     * Get candlestick data for crypto symbols.
     * @summary Crypto Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoCandles(symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CryptoCandles>>;
    /**
     * List supported crypto exchanges
     * @summary Crypto Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoExchanges(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Get crypto\'s profile.
     * @summary Crypto Profile
     * @param {string} symbol Crypto symbol such as BTC or ETH.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoProfile(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CryptoProfile>>;
    /**
     * List supported crypto symbols by exchange
     * @summary Crypto Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoSymbols(exchange: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CryptoSymbol>>>;
    /**
     * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
     * @summary Earnings Calendar
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {string} [symbol] Filter by symbol: AAPL.
     * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    earningsCalendar(from?: string, to?: string, symbol?: string, international?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsCalendar>>;
    /**
     * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
     * @summary Economic Calendar
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicCalendar(from?: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EconomicCalendar>>;
    /**
     * List codes of supported economic data.
     * @summary Economic Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicCode(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EconomicCode>>>;
    /**
     * Get economic data.
     * @summary Economic Data
     * @param {string} code Economic code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicData(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EconomicData>>;
    /**
     * Get ETF country exposure data.
     * @summary ETFs Country Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsCountryExposure(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETFsCountryExposure>>;
    /**
     * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
     * @summary ETFs Holdings
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsHoldings(symbol?: string, isin?: string, skip?: number, date?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETFsHoldings>>;
    /**
     * Get ETF profile information. This endpoint has global coverage.
     * @summary ETFs Profile
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsProfile(symbol?: string, isin?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETFsProfile>>;
    /**
     * Get ETF sector exposure data.
     * @summary ETFs Sector Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsSectorExposure(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETFsSectorExposure>>;
    /**
     * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
     * @summary FDA Committee Meeting Calendar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fdaCommitteeMeetingCalendar(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FDAComitteeMeeting>>>;
    /**
     * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
     * @summary SEC Filings
     * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
     * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filings(symbol?: string, cik?: string, accessNumber?: string, form?: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Filing>>>;
    /**
     * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
     * @summary SEC Sentiment Analysis
     * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filingsSentiment(accessNumber: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SECSentimentAnalysis>>;
    /**
     * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
     * @summary Financial Statements
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
     * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financials(symbol: string, statement: string, freq: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialStatements>>;
    /**
     * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
     * @summary Financials As Reported
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
     * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financialsReported(symbol?: string, cik?: string, accessNumber?: string, freq?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialsAsReported>>;
    /**
     * Get candlestick data for forex symbols.
     * @summary Forex Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexCandles(symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ForexCandles>>;
    /**
     * List supported forex exchanges
     * @summary Forex Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexExchanges(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     * Get rates for all forex pairs. Ideal for currency conversion
     * @summary Forex rates
     * @param {string} [base] Base currency. Default to EUR.
     * @param {string} [date] Date. Leave blank to get the latest data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexRates(base?: string, date?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Forexrates>>;
    /**
     * List supported forex symbols.
     * @summary Forex Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexSymbols(exchange: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ForexSymbol>>>;
    /**
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Fund Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fundOwnership(symbol: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundOwnership>>;
    /**
     * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Indices Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indicesConstituents(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndicesConstituents>>;
    /**
     * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
     * @summary Indices Historical Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indicesHistoricalConstituents(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndicesHistoricalConstituents>>;
    /**
     * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
     * @summary Insider Sentiment
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insiderSentiment(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsiderSentiments>>;
    /**
     * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
     * @summary Insider Transactions
     * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insiderTransactions(symbol: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsiderTransactions>>;
    /**
     * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
     * @summary International Filings
     * @param {string} [symbol] Symbol. Leave empty to list latest filings.
     * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    internationalFilings(symbol?: string, country?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InternationalFiling>>>;
    /**
     * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
     * @summary Investment Themes (Thematic Investing)
     * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    investmentThemes(theme: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvestmentThemes>>;
    /**
     * Get recent and upcoming IPO.
     * @summary IPO Calendar
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipoCalendar(from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPOCalendar>>;
    /**
     * Get latest market news.
     * @summary Market News
     * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
     * @param {number} [minId] Use this field to get only news after this ID. Default to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketNews(category: string, minId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MarketNews>>>;
    /**
     * Get Mutual Funds country exposure data.
     * @summary Mutual Funds Country Exposure
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundCountryExposure(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MutualFundCountryExposure>>;
    /**
     * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Holdings
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundHoldings(symbol?: string, isin?: string, skip?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MutualFundHoldings>>;
    /**
     * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Profile
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundProfile(symbol?: string, isin?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MutualFundProfile>>;
    /**
     * Get Mutual Funds sector exposure data.
     * @summary Mutual Funds Sector Exposure
     * @param {string} symbol Mutual Fund symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundSectorExposure(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MutualFundSectorExposure>>;
    /**
     * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
     * @summary News Sentiment
     * @param {string} symbol Company symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsSentiment(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsSentiment>>;
    /**
     * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ownership(symbol: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ownership>>;
    /**
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     * @summary Pattern Recognition
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patternRecognition(symbol: string, resolution: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PatternRecognition>>;
    /**
     * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Major Press Releases
     * @param {string} symbol Company symbol.
     * @param {string} [from] From time: 2020-01-01.
     * @param {string} [to] To time: 2020-01-05.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressReleases(symbol: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PressRelease>>;
    /**
     * Get latest price target consensus.
     * @summary Price Target
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    priceTarget(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceTarget>>;
    /**
     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Quote
     * @param {string} symbol Symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quote(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quote>>;
    /**
     * Get latest analyst recommendation trends for a company.
     * @summary Recommendation Trends
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recommendationTrends(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecommendationTrend>>>;
    /**
     * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
     * @summary Revenue Breakdown
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revenueBreakdown(symbol?: string, cik?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevenueBreakdown>>;
    /**
     * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
     * @summary Similarity Index
     * @param {string} [symbol] Symbol. Required if cik is empty
     * @param {string} [cik] CIK. Required if symbol is empty
     * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarityIndex(symbol?: string, cik?: string, freq?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimilarityIndex>>;
    /**
     * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
     * @summary Social Sentiment
     * @param {string} symbol Company symbol.
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialSentiment(symbol: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SocialSentiment>>;
    /**
     * Get global dividends data.
     * @summary Dividends 2 (Basic)
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockBasicDividends(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dividends2>>;
    /**
     * Get last bid/ask data for US stocks.
     * @summary Last Bid-Ask
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockBidask(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LastBidAsk>>;
    /**
     * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
     * @summary Stock Candles
     * @param {string} symbol Symbol.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockCandles(symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StockCandles>>;
    /**
     * Get dividends data for common stocks going back 30 years.
     * @summary Dividends
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockDividends(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Dividends>>>;
    /**
     * Get a list of reported lobbying activities in the Senate and the House.
     * @summary Senate Lobbying
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockLobbying(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LobbyingResult>>;
    /**
     * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
     * @summary Historical NBBO
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockNbbo(symbol: string, date: string, limit: number, skip: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HistoricalNBBO>>;
    /**
     * Get splits data for stocks.
     * @summary Splits
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockSplits(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Split>>>;
    /**
     * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Stock Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {string} [mic] Filter by MIC code.
     * @param {string} [securityType] Filter by security type used by OpenFigi standard.
     * @param {string} [currency] Filter by currency.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockSymbols(exchange: string, mic?: string, securityType?: string, currency?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StockSymbol>>>;
    /**
     * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
     * @summary Tick Data
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockTick(symbol: string, date: string, limit: number, skip: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TickData>>;
    /**
     * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
     * @summary USA Spending
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockUsaSpending(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsaSpendingResult>>;
    /**
     * List USPTO patents for companies. Limit to 250 records per API call.
     * @summary USPTO Patents
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockUsptoPatent(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsptoPatentResult>>;
    /**
     * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
     * @summary H1-B Visa Application
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockVisaApplication(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VisaApplicationResult>>;
    /**
     * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
     * @summary Supply Chain Relationships
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyChainRelationships(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupplyChainRelationships>>;
    /**
     * Get support and resistance levels for a symbol.
     * @summary Support/Resistance
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supportResistance(symbol: string, resolution: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportResistance>>;
    /**
     * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
     * @summary Symbol Lookup
     * @param {string} q Query text can be symbol, name, isin, or cusip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbolSearch(q: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SymbolLookup>>;
    /**
     * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Technical Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    technicalIndicator(symbol: string, resolution: string, from: number, to: number, indicator: string, indicatorFields?: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
     * @summary Earnings Call Transcripts
     * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transcripts(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsCallTranscripts>>;
    /**
     * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
     * @summary Earnings Call Transcripts List
     * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transcriptsList(symbol: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsCallTranscriptsList>>;
    /**
     * Get latest stock upgrade and downgrade.
     * @summary Stock Upgrade/Downgrade
     * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
     * @param {string} [from] From date: 2000-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upgradeDowngrade(symbol?: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UpgradeDowngrade>>>;
};
/**
 * DefaultApi - factory interface
 * @export
 */
export declare const DefaultApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
     * @summary Aggregate Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    aggregateIndicator(symbol: string, resolution: string, options?: any): AxiosPromise<AggregateIndicators>;
    /**
     * Get end-of-day bond\'s price data.
     * @summary Bond price data
     * @param {string} isin ISIN.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bondPrice(isin: string, from: number, to: number, options?: any): AxiosPromise<BondCandles>;
    /**
     * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
     * @summary Bond Profile
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {string} [figi] FIGI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    bondProfile(isin?: string, cusip?: string, figi?: string, options?: any): AxiosPromise<BondProfile>;
    /**
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     * @summary Basic Financials
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyBasicFinancials(symbol: string, metric: string, options?: any): AxiosPromise<BasicFinancials>;
    /**
     * Get company historical quarterly earnings surprise going back to 2000.
     * @summary Earnings Surprises
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEarnings(symbol: string, limit?: number, options?: any): AxiosPromise<Array<EarningResult>>;
    /**
     * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
     * @summary Company Earnings Quality Score
     * @param {string} symbol Symbol.
     * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEarningsQualityScore(symbol: string, freq: string, options?: any): AxiosPromise<CompanyEarningsQualityScore>;
    /**
     * Get company\'s ebit estimates.
     * @summary EBIT Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEbitEstimates(symbol: string, freq?: string, options?: any): AxiosPromise<EbitEstimates>;
    /**
     * Get company\'s ebitda estimates.
     * @summary EBITDA Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEbitdaEstimates(symbol: string, freq?: string, options?: any): AxiosPromise<EbitdaEstimates>;
    /**
     * Get company\'s EPS estimates.
     * @summary Earnings Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEpsEstimates(symbol: string, freq?: string, options?: any): AxiosPromise<EarningsEstimates>;
    /**
     * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
     * @summary Company ESG Scores
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyEsgScore(symbol: string, options?: any): AxiosPromise<CompanyESG>;
    /**
     * Get a list of company\'s executives and members of the Board.
     * @summary Company Executive
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyExecutive(symbol: string, options?: any): AxiosPromise<CompanyExecutive>;
    /**
     * List latest company news by symbol. This endpoint is only available for North American companies.
     * @summary Company News
     * @param {string} symbol Company symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyNews(symbol: string, from: string, to: string, options?: any): AxiosPromise<Array<CompanyNews>>;
    /**
     * Get company peers. Return a list of peers in the same country and sub-industry
     * @summary Peers
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyPeers(symbol: string, options?: any): AxiosPromise<Array<string>>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     * @summary Company Profile
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyProfile(symbol?: string, isin?: string, cusip?: string, options?: any): AxiosPromise<CompanyProfile>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
     * @summary Company Profile 2
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyProfile2(symbol?: string, isin?: string, cusip?: string, options?: any): AxiosPromise<CompanyProfile2>;
    /**
     * Get company\'s revenue estimates.
     * @summary Revenue Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    companyRevenueEstimates(symbol: string, freq?: string, options?: any): AxiosPromise<RevenueEstimates>;
    /**
     * List all countries and metadata.
     * @summary Country Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    country(options?: any): AxiosPromise<Array<CountryMetadata>>;
    /**
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
     * @summary COVID-19
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    covid19(options?: any): AxiosPromise<Array<CovidInfo>>;
    /**
     * Get candlestick data for crypto symbols.
     * @summary Crypto Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoCandles(symbol: string, resolution: string, from: number, to: number, options?: any): AxiosPromise<CryptoCandles>;
    /**
     * List supported crypto exchanges
     * @summary Crypto Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoExchanges(options?: any): AxiosPromise<Array<string>>;
    /**
     * Get crypto\'s profile.
     * @summary Crypto Profile
     * @param {string} symbol Crypto symbol such as BTC or ETH.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoProfile(symbol: string, options?: any): AxiosPromise<CryptoProfile>;
    /**
     * List supported crypto symbols by exchange
     * @summary Crypto Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cryptoSymbols(exchange: string, options?: any): AxiosPromise<Array<CryptoSymbol>>;
    /**
     * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
     * @summary Earnings Calendar
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {string} [symbol] Filter by symbol: AAPL.
     * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    earningsCalendar(from?: string, to?: string, symbol?: string, international?: boolean, options?: any): AxiosPromise<EarningsCalendar>;
    /**
     * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
     * @summary Economic Calendar
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicCalendar(from?: string, to?: string, options?: any): AxiosPromise<EconomicCalendar>;
    /**
     * List codes of supported economic data.
     * @summary Economic Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicCode(options?: any): AxiosPromise<Array<EconomicCode>>;
    /**
     * Get economic data.
     * @summary Economic Data
     * @param {string} code Economic code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    economicData(code: string, options?: any): AxiosPromise<EconomicData>;
    /**
     * Get ETF country exposure data.
     * @summary ETFs Country Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsCountryExposure(symbol: string, options?: any): AxiosPromise<ETFsCountryExposure>;
    /**
     * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
     * @summary ETFs Holdings
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsHoldings(symbol?: string, isin?: string, skip?: number, date?: string, options?: any): AxiosPromise<ETFsHoldings>;
    /**
     * Get ETF profile information. This endpoint has global coverage.
     * @summary ETFs Profile
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsProfile(symbol?: string, isin?: string, options?: any): AxiosPromise<ETFsProfile>;
    /**
     * Get ETF sector exposure data.
     * @summary ETFs Sector Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    etfsSectorExposure(symbol: string, options?: any): AxiosPromise<ETFsSectorExposure>;
    /**
     * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
     * @summary FDA Committee Meeting Calendar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fdaCommitteeMeetingCalendar(options?: any): AxiosPromise<Array<FDAComitteeMeeting>>;
    /**
     * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
     * @summary SEC Filings
     * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
     * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filings(symbol?: string, cik?: string, accessNumber?: string, form?: string, from?: string, to?: string, options?: any): AxiosPromise<Array<Filing>>;
    /**
     * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
     * @summary SEC Sentiment Analysis
     * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    filingsSentiment(accessNumber: string, options?: any): AxiosPromise<SECSentimentAnalysis>;
    /**
     * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
     * @summary Financial Statements
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
     * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financials(symbol: string, statement: string, freq: string, options?: any): AxiosPromise<FinancialStatements>;
    /**
     * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
     * @summary Financials As Reported
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
     * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    financialsReported(symbol?: string, cik?: string, accessNumber?: string, freq?: string, options?: any): AxiosPromise<FinancialsAsReported>;
    /**
     * Get candlestick data for forex symbols.
     * @summary Forex Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexCandles(symbol: string, resolution: string, from: number, to: number, options?: any): AxiosPromise<ForexCandles>;
    /**
     * List supported forex exchanges
     * @summary Forex Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexExchanges(options?: any): AxiosPromise<Array<string>>;
    /**
     * Get rates for all forex pairs. Ideal for currency conversion
     * @summary Forex rates
     * @param {string} [base] Base currency. Default to EUR.
     * @param {string} [date] Date. Leave blank to get the latest data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexRates(base?: string, date?: string, options?: any): AxiosPromise<Forexrates>;
    /**
     * List supported forex symbols.
     * @summary Forex Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forexSymbols(exchange: string, options?: any): AxiosPromise<Array<ForexSymbol>>;
    /**
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Fund Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fundOwnership(symbol: string, limit?: number, options?: any): AxiosPromise<FundOwnership>;
    /**
     * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Indices Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indicesConstituents(symbol: string, options?: any): AxiosPromise<IndicesConstituents>;
    /**
     * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
     * @summary Indices Historical Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indicesHistoricalConstituents(symbol: string, options?: any): AxiosPromise<IndicesHistoricalConstituents>;
    /**
     * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
     * @summary Insider Sentiment
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insiderSentiment(symbol: string, from: string, to: string, options?: any): AxiosPromise<InsiderSentiments>;
    /**
     * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
     * @summary Insider Transactions
     * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insiderTransactions(symbol: string, from?: string, to?: string, options?: any): AxiosPromise<InsiderTransactions>;
    /**
     * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
     * @summary International Filings
     * @param {string} [symbol] Symbol. Leave empty to list latest filings.
     * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    internationalFilings(symbol?: string, country?: string, options?: any): AxiosPromise<Array<InternationalFiling>>;
    /**
     * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
     * @summary Investment Themes (Thematic Investing)
     * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    investmentThemes(theme: string, options?: any): AxiosPromise<InvestmentThemes>;
    /**
     * Get recent and upcoming IPO.
     * @summary IPO Calendar
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ipoCalendar(from: string, to: string, options?: any): AxiosPromise<IPOCalendar>;
    /**
     * Get latest market news.
     * @summary Market News
     * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
     * @param {number} [minId] Use this field to get only news after this ID. Default to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    marketNews(category: string, minId?: number, options?: any): AxiosPromise<Array<MarketNews>>;
    /**
     * Get Mutual Funds country exposure data.
     * @summary Mutual Funds Country Exposure
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundCountryExposure(symbol: string, options?: any): AxiosPromise<MutualFundCountryExposure>;
    /**
     * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Holdings
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundHoldings(symbol?: string, isin?: string, skip?: number, options?: any): AxiosPromise<MutualFundHoldings>;
    /**
     * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Profile
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundProfile(symbol?: string, isin?: string, options?: any): AxiosPromise<MutualFundProfile>;
    /**
     * Get Mutual Funds sector exposure data.
     * @summary Mutual Funds Sector Exposure
     * @param {string} symbol Mutual Fund symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mutualFundSectorExposure(symbol: string, options?: any): AxiosPromise<MutualFundSectorExposure>;
    /**
     * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
     * @summary News Sentiment
     * @param {string} symbol Company symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    newsSentiment(symbol: string, options?: any): AxiosPromise<NewsSentiment>;
    /**
     * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ownership(symbol: string, limit?: number, options?: any): AxiosPromise<Ownership>;
    /**
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     * @summary Pattern Recognition
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patternRecognition(symbol: string, resolution: string, options?: any): AxiosPromise<PatternRecognition>;
    /**
     * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Major Press Releases
     * @param {string} symbol Company symbol.
     * @param {string} [from] From time: 2020-01-01.
     * @param {string} [to] To time: 2020-01-05.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressReleases(symbol: string, from?: string, to?: string, options?: any): AxiosPromise<PressRelease>;
    /**
     * Get latest price target consensus.
     * @summary Price Target
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    priceTarget(symbol: string, options?: any): AxiosPromise<PriceTarget>;
    /**
     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Quote
     * @param {string} symbol Symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quote(symbol: string, options?: any): AxiosPromise<Quote>;
    /**
     * Get latest analyst recommendation trends for a company.
     * @summary Recommendation Trends
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recommendationTrends(symbol: string, options?: any): AxiosPromise<Array<RecommendationTrend>>;
    /**
     * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
     * @summary Revenue Breakdown
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    revenueBreakdown(symbol?: string, cik?: string, options?: any): AxiosPromise<RevenueBreakdown>;
    /**
     * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
     * @summary Similarity Index
     * @param {string} [symbol] Symbol. Required if cik is empty
     * @param {string} [cik] CIK. Required if symbol is empty
     * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    similarityIndex(symbol?: string, cik?: string, freq?: string, options?: any): AxiosPromise<SimilarityIndex>;
    /**
     * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
     * @summary Social Sentiment
     * @param {string} symbol Company symbol.
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    socialSentiment(symbol: string, from?: string, to?: string, options?: any): AxiosPromise<SocialSentiment>;
    /**
     * Get global dividends data.
     * @summary Dividends 2 (Basic)
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockBasicDividends(symbol: string, options?: any): AxiosPromise<Dividends2>;
    /**
     * Get last bid/ask data for US stocks.
     * @summary Last Bid-Ask
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockBidask(symbol: string, options?: any): AxiosPromise<LastBidAsk>;
    /**
     * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
     * @summary Stock Candles
     * @param {string} symbol Symbol.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockCandles(symbol: string, resolution: string, from: number, to: number, options?: any): AxiosPromise<StockCandles>;
    /**
     * Get dividends data for common stocks going back 30 years.
     * @summary Dividends
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockDividends(symbol: string, from: string, to: string, options?: any): AxiosPromise<Array<Dividends>>;
    /**
     * Get a list of reported lobbying activities in the Senate and the House.
     * @summary Senate Lobbying
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockLobbying(symbol: string, from: string, to: string, options?: any): AxiosPromise<LobbyingResult>;
    /**
     * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
     * @summary Historical NBBO
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockNbbo(symbol: string, date: string, limit: number, skip: number, options?: any): AxiosPromise<HistoricalNBBO>;
    /**
     * Get splits data for stocks.
     * @summary Splits
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockSplits(symbol: string, from: string, to: string, options?: any): AxiosPromise<Array<Split>>;
    /**
     * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Stock Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {string} [mic] Filter by MIC code.
     * @param {string} [securityType] Filter by security type used by OpenFigi standard.
     * @param {string} [currency] Filter by currency.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockSymbols(exchange: string, mic?: string, securityType?: string, currency?: string, options?: any): AxiosPromise<Array<StockSymbol>>;
    /**
     * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
     * @summary Tick Data
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockTick(symbol: string, date: string, limit: number, skip: number, options?: any): AxiosPromise<TickData>;
    /**
     * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
     * @summary USA Spending
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockUsaSpending(symbol: string, from: string, to: string, options?: any): AxiosPromise<UsaSpendingResult>;
    /**
     * List USPTO patents for companies. Limit to 250 records per API call.
     * @summary USPTO Patents
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockUsptoPatent(symbol: string, from: string, to: string, options?: any): AxiosPromise<UsptoPatentResult>;
    /**
     * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
     * @summary H1-B Visa Application
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stockVisaApplication(symbol: string, from: string, to: string, options?: any): AxiosPromise<VisaApplicationResult>;
    /**
     * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
     * @summary Supply Chain Relationships
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supplyChainRelationships(symbol: string, options?: any): AxiosPromise<SupplyChainRelationships>;
    /**
     * Get support and resistance levels for a symbol.
     * @summary Support/Resistance
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    supportResistance(symbol: string, resolution: string, options?: any): AxiosPromise<SupportResistance>;
    /**
     * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
     * @summary Symbol Lookup
     * @param {string} q Query text can be symbol, name, isin, or cusip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    symbolSearch(q: string, options?: any): AxiosPromise<SymbolLookup>;
    /**
     * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Technical Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    technicalIndicator(symbol: string, resolution: string, from: number, to: number, indicator: string, indicatorFields?: object, options?: any): AxiosPromise<object>;
    /**
     * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
     * @summary Earnings Call Transcripts
     * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transcripts(id: string, options?: any): AxiosPromise<EarningsCallTranscripts>;
    /**
     * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
     * @summary Earnings Call Transcripts List
     * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transcriptsList(symbol: string, options?: any): AxiosPromise<EarningsCallTranscriptsList>;
    /**
     * Get latest stock upgrade and downgrade.
     * @summary Stock Upgrade/Downgrade
     * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
     * @param {string} [from] From date: 2000-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    upgradeDowngrade(symbol?: string, from?: string, to?: string, options?: any): AxiosPromise<Array<UpgradeDowngrade>>;
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export declare class DefaultApi extends BaseAPI {
    /**
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
     * @summary Aggregate Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    aggregateIndicator(symbol: string, resolution: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AggregateIndicators, any>>;
    /**
     * Get end-of-day bond\'s price data.
     * @summary Bond price data
     * @param {string} isin ISIN.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    bondPrice(isin: string, from: number, to: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BondCandles, any>>;
    /**
     * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
     * @summary Bond Profile
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {string} [figi] FIGI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    bondProfile(isin?: string, cusip?: string, figi?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BondProfile, any>>;
    /**
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     * @summary Basic Financials
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyBasicFinancials(symbol: string, metric: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BasicFinancials, any>>;
    /**
     * Get company historical quarterly earnings surprise going back to 2000.
     * @summary Earnings Surprises
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEarnings(symbol: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EarningResult[], any>>;
    /**
     * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
     * @summary Company Earnings Quality Score
     * @param {string} symbol Symbol.
     * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEarningsQualityScore(symbol: string, freq: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyEarningsQualityScore, any>>;
    /**
     * Get company\'s ebit estimates.
     * @summary EBIT Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEbitEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EbitEstimates, any>>;
    /**
     * Get company\'s ebitda estimates.
     * @summary EBITDA Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEbitdaEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EbitdaEstimates, any>>;
    /**
     * Get company\'s EPS estimates.
     * @summary Earnings Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEpsEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EarningsEstimates, any>>;
    /**
     * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
     * @summary Company ESG Scores
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEsgScore(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyESG, any>>;
    /**
     * Get a list of company\'s executives and members of the Board.
     * @summary Company Executive
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyExecutive(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyExecutive, any>>;
    /**
     * List latest company news by symbol. This endpoint is only available for North American companies.
     * @summary Company News
     * @param {string} symbol Company symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyNews(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyNews[], any>>;
    /**
     * Get company peers. Return a list of peers in the same country and sub-industry
     * @summary Peers
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyPeers(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     * @summary Company Profile
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyProfile(symbol?: string, isin?: string, cusip?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyProfile, any>>;
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
     * @summary Company Profile 2
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyProfile2(symbol?: string, isin?: string, cusip?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CompanyProfile2, any>>;
    /**
     * Get company\'s revenue estimates.
     * @summary Revenue Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyRevenueEstimates(symbol: string, freq?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RevenueEstimates, any>>;
    /**
     * List all countries and metadata.
     * @summary Country Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    country(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CountryMetadata[], any>>;
    /**
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
     * @summary COVID-19
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    covid19(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CovidInfo[], any>>;
    /**
     * Get candlestick data for crypto symbols.
     * @summary Crypto Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoCandles(symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CryptoCandles, any>>;
    /**
     * List supported crypto exchanges
     * @summary Crypto Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoExchanges(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Get crypto\'s profile.
     * @summary Crypto Profile
     * @param {string} symbol Crypto symbol such as BTC or ETH.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoProfile(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CryptoProfile, any>>;
    /**
     * List supported crypto symbols by exchange
     * @summary Crypto Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoSymbols(exchange: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CryptoSymbol[], any>>;
    /**
     * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
     * @summary Earnings Calendar
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {string} [symbol] Filter by symbol: AAPL.
     * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    earningsCalendar(from?: string, to?: string, symbol?: string, international?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EarningsCalendar, any>>;
    /**
     * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
     * @summary Economic Calendar
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    economicCalendar(from?: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EconomicCalendar, any>>;
    /**
     * List codes of supported economic data.
     * @summary Economic Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    economicCode(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EconomicCode[], any>>;
    /**
     * Get economic data.
     * @summary Economic Data
     * @param {string} code Economic code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    economicData(code: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EconomicData, any>>;
    /**
     * Get ETF country exposure data.
     * @summary ETFs Country Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsCountryExposure(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ETFsCountryExposure, any>>;
    /**
     * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
     * @summary ETFs Holdings
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsHoldings(symbol?: string, isin?: string, skip?: number, date?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ETFsHoldings, any>>;
    /**
     * Get ETF profile information. This endpoint has global coverage.
     * @summary ETFs Profile
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsProfile(symbol?: string, isin?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ETFsProfile, any>>;
    /**
     * Get ETF sector exposure data.
     * @summary ETFs Sector Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsSectorExposure(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ETFsSectorExposure, any>>;
    /**
     * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
     * @summary FDA Committee Meeting Calendar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    fdaCommitteeMeetingCalendar(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FDAComitteeMeeting[], any>>;
    /**
     * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
     * @summary SEC Filings
     * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
     * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    filings(symbol?: string, cik?: string, accessNumber?: string, form?: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Filing[], any>>;
    /**
     * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
     * @summary SEC Sentiment Analysis
     * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    filingsSentiment(accessNumber: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SECSentimentAnalysis, any>>;
    /**
     * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
     * @summary Financial Statements
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
     * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    financials(symbol: string, statement: string, freq: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FinancialStatements, any>>;
    /**
     * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
     * @summary Financials As Reported
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
     * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    financialsReported(symbol?: string, cik?: string, accessNumber?: string, freq?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FinancialsAsReported, any>>;
    /**
     * Get candlestick data for forex symbols.
     * @summary Forex Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexCandles(symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ForexCandles, any>>;
    /**
     * List supported forex exchanges
     * @summary Forex Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexExchanges(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     * Get rates for all forex pairs. Ideal for currency conversion
     * @summary Forex rates
     * @param {string} [base] Base currency. Default to EUR.
     * @param {string} [date] Date. Leave blank to get the latest data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexRates(base?: string, date?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Forexrates, any>>;
    /**
     * List supported forex symbols.
     * @summary Forex Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexSymbols(exchange: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<ForexSymbol[], any>>;
    /**
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Fund Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    fundOwnership(symbol: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<FundOwnership, any>>;
    /**
     * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Indices Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    indicesConstituents(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IndicesConstituents, any>>;
    /**
     * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
     * @summary Indices Historical Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    indicesHistoricalConstituents(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IndicesHistoricalConstituents, any>>;
    /**
     * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
     * @summary Insider Sentiment
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insiderSentiment(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InsiderSentiments, any>>;
    /**
     * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
     * @summary Insider Transactions
     * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insiderTransactions(symbol: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InsiderTransactions, any>>;
    /**
     * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
     * @summary International Filings
     * @param {string} [symbol] Symbol. Leave empty to list latest filings.
     * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    internationalFilings(symbol?: string, country?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InternationalFiling[], any>>;
    /**
     * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
     * @summary Investment Themes (Thematic Investing)
     * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    investmentThemes(theme: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvestmentThemes, any>>;
    /**
     * Get recent and upcoming IPO.
     * @summary IPO Calendar
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    ipoCalendar(from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<IPOCalendar, any>>;
    /**
     * Get latest market news.
     * @summary Market News
     * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
     * @param {number} [minId] Use this field to get only news after this ID. Default to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    marketNews(category: string, minId?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MarketNews[], any>>;
    /**
     * Get Mutual Funds country exposure data.
     * @summary Mutual Funds Country Exposure
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundCountryExposure(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MutualFundCountryExposure, any>>;
    /**
     * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Holdings
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundHoldings(symbol?: string, isin?: string, skip?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MutualFundHoldings, any>>;
    /**
     * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Profile
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundProfile(symbol?: string, isin?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MutualFundProfile, any>>;
    /**
     * Get Mutual Funds sector exposure data.
     * @summary Mutual Funds Sector Exposure
     * @param {string} symbol Mutual Fund symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundSectorExposure(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<MutualFundSectorExposure, any>>;
    /**
     * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
     * @summary News Sentiment
     * @param {string} symbol Company symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    newsSentiment(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NewsSentiment, any>>;
    /**
     * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    ownership(symbol: string, limit?: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Ownership, any>>;
    /**
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     * @summary Pattern Recognition
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    patternRecognition(symbol: string, resolution: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PatternRecognition, any>>;
    /**
     * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Major Press Releases
     * @param {string} symbol Company symbol.
     * @param {string} [from] From time: 2020-01-01.
     * @param {string} [to] To time: 2020-01-05.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    pressReleases(symbol: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PressRelease, any>>;
    /**
     * Get latest price target consensus.
     * @summary Price Target
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    priceTarget(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PriceTarget, any>>;
    /**
     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Quote
     * @param {string} symbol Symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    quote(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Quote, any>>;
    /**
     * Get latest analyst recommendation trends for a company.
     * @summary Recommendation Trends
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    recommendationTrends(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RecommendationTrend[], any>>;
    /**
     * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
     * @summary Revenue Breakdown
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    revenueBreakdown(symbol?: string, cik?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RevenueBreakdown, any>>;
    /**
     * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
     * @summary Similarity Index
     * @param {string} [symbol] Symbol. Required if cik is empty
     * @param {string} [cik] CIK. Required if symbol is empty
     * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    similarityIndex(symbol?: string, cik?: string, freq?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SimilarityIndex, any>>;
    /**
     * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
     * @summary Social Sentiment
     * @param {string} symbol Company symbol.
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    socialSentiment(symbol: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SocialSentiment, any>>;
    /**
     * Get global dividends data.
     * @summary Dividends 2 (Basic)
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockBasicDividends(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Dividends2, any>>;
    /**
     * Get last bid/ask data for US stocks.
     * @summary Last Bid-Ask
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockBidask(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LastBidAsk, any>>;
    /**
     * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
     * @summary Stock Candles
     * @param {string} symbol Symbol.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockCandles(symbol: string, resolution: string, from: number, to: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StockCandles, any>>;
    /**
     * Get dividends data for common stocks going back 30 years.
     * @summary Dividends
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockDividends(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Dividends[], any>>;
    /**
     * Get a list of reported lobbying activities in the Senate and the House.
     * @summary Senate Lobbying
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockLobbying(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<LobbyingResult, any>>;
    /**
     * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
     * @summary Historical NBBO
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockNbbo(symbol: string, date: string, limit: number, skip: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HistoricalNBBO, any>>;
    /**
     * Get splits data for stocks.
     * @summary Splits
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockSplits(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Split[], any>>;
    /**
     * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Stock Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {string} [mic] Filter by MIC code.
     * @param {string} [securityType] Filter by security type used by OpenFigi standard.
     * @param {string} [currency] Filter by currency.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockSymbols(exchange: string, mic?: string, securityType?: string, currency?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<StockSymbol[], any>>;
    /**
     * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
     * @summary Tick Data
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockTick(symbol: string, date: string, limit: number, skip: number, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TickData, any>>;
    /**
     * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
     * @summary USA Spending
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockUsaSpending(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsaSpendingResult, any>>;
    /**
     * List USPTO patents for companies. Limit to 250 records per API call.
     * @summary USPTO Patents
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockUsptoPatent(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UsptoPatentResult, any>>;
    /**
     * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
     * @summary H1-B Visa Application
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockVisaApplication(symbol: string, from: string, to: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<VisaApplicationResult, any>>;
    /**
     * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
     * @summary Supply Chain Relationships
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    supplyChainRelationships(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SupplyChainRelationships, any>>;
    /**
     * Get support and resistance levels for a symbol.
     * @summary Support/Resistance
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    supportResistance(symbol: string, resolution: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SupportResistance, any>>;
    /**
     * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
     * @summary Symbol Lookup
     * @param {string} q Query text can be symbol, name, isin, or cusip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    symbolSearch(q: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<SymbolLookup, any>>;
    /**
     * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Technical Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    technicalIndicator(symbol: string, resolution: string, from: number, to: number, indicator: string, indicatorFields?: object, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
     * @summary Earnings Call Transcripts
     * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transcripts(id: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EarningsCallTranscripts, any>>;
    /**
     * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
     * @summary Earnings Call Transcripts List
     * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transcriptsList(symbol: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<EarningsCallTranscriptsList, any>>;
    /**
     * Get latest stock upgrade and downgrade.
     * @summary Stock Upgrade/Downgrade
     * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
     * @param {string} [from] From date: 2000-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    upgradeDowngrade(symbol?: string, from?: string, to?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UpgradeDowngrade[], any>>;
}
