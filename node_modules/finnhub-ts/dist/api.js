"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Finnhub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = exports.DefaultApiFactory = exports.DefaultApiFp = exports.DefaultApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * DefaultApi - axios parameter creator
 * @export
 */
const DefaultApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
         * @summary Aggregate Indicators
         * @param {string} symbol symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateIndicator: async (symbol, resolution, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('aggregateIndicator', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('aggregateIndicator', 'resolution', resolution);
            const localVarPath = `/scan/technical-indicator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get end-of-day bond\'s price data.
         * @summary Bond price data
         * @param {string} isin ISIN.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bondPrice: async (isin, from, to, options = {}) => {
            // verify required parameter 'isin' is not null or undefined
            (0, common_1.assertParamExists)('bondPrice', 'isin', isin);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('bondPrice', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('bondPrice', 'to', to);
            const localVarPath = `/bond/price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
         * @summary Bond Profile
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {string} [figi] FIGI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bondProfile: async (isin, cusip, figi, options = {}) => {
            const localVarPath = `/bond/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            if (cusip !== undefined) {
                localVarQueryParameter['cusip'] = cusip;
            }
            if (figi !== undefined) {
                localVarQueryParameter['figi'] = figi;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
         * @summary Basic Financials
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyBasicFinancials: async (symbol, metric, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyBasicFinancials', 'symbol', symbol);
            // verify required parameter 'metric' is not null or undefined
            (0, common_1.assertParamExists)('companyBasicFinancials', 'metric', metric);
            const localVarPath = `/stock/metric`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (metric !== undefined) {
                localVarQueryParameter['metric'] = metric;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company historical quarterly earnings surprise going back to 2000.
         * @summary Earnings Surprises
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEarnings: async (symbol, limit, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyEarnings', 'symbol', symbol);
            const localVarPath = `/stock/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
         * @summary Company Earnings Quality Score
         * @param {string} symbol Symbol.
         * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEarningsQualityScore: async (symbol, freq, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyEarningsQualityScore', 'symbol', symbol);
            // verify required parameter 'freq' is not null or undefined
            (0, common_1.assertParamExists)('companyEarningsQualityScore', 'freq', freq);
            const localVarPath = `/stock/earnings-quality-score`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company\'s ebit estimates.
         * @summary EBIT Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEbitEstimates: async (symbol, freq, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyEbitEstimates', 'symbol', symbol);
            const localVarPath = `/stock/ebit-estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company\'s ebitda estimates.
         * @summary EBITDA Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEbitdaEstimates: async (symbol, freq, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyEbitdaEstimates', 'symbol', symbol);
            const localVarPath = `/stock/ebitda-estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company\'s EPS estimates.
         * @summary Earnings Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEpsEstimates: async (symbol, freq, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyEpsEstimates', 'symbol', symbol);
            const localVarPath = `/stock/eps-estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
         * @summary Company ESG Scores
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEsgScore: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyEsgScore', 'symbol', symbol);
            const localVarPath = `/stock/esg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of company\'s executives and members of the Board.
         * @summary Company Executive
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyExecutive: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyExecutive', 'symbol', symbol);
            const localVarPath = `/stock/executive`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List latest company news by symbol. This endpoint is only available for North American companies.
         * @summary Company News
         * @param {string} symbol Company symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyNews: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyNews', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('companyNews', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('companyNews', 'to', to);
            const localVarPath = `/company-news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company peers. Return a list of peers in the same country and sub-industry
         * @summary Peers
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyPeers: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyPeers', 'symbol', symbol);
            const localVarPath = `/stock/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get general information of a company. You can query by symbol, ISIN or CUSIP
         * @summary Company Profile
         * @param {string} [symbol] Symbol of the company: AAPL e.g.
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyProfile: async (symbol, isin, cusip, options = {}) => {
            const localVarPath = `/stock/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            if (cusip !== undefined) {
                localVarQueryParameter['cusip'] = cusip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
         * @summary Company Profile 2
         * @param {string} [symbol] Symbol of the company: AAPL e.g.
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyProfile2: async (symbol, isin, cusip, options = {}) => {
            const localVarPath = `/stock/profile2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            if (cusip !== undefined) {
                localVarQueryParameter['cusip'] = cusip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company\'s revenue estimates.
         * @summary Revenue Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRevenueEstimates: async (symbol, freq, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('companyRevenueEstimates', 'symbol', symbol);
            const localVarPath = `/stock/revenue-estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all countries and metadata.
         * @summary Country Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        country: async (options = {}) => {
            const localVarPath = `/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
         * @summary COVID-19
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        covid19: async (options = {}) => {
            const localVarPath = `/covid19/us`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get candlestick data for crypto symbols.
         * @summary Crypto Candles
         * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoCandles: async (symbol, resolution, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('cryptoCandles', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('cryptoCandles', 'resolution', resolution);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('cryptoCandles', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('cryptoCandles', 'to', to);
            const localVarPath = `/crypto/candle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List supported crypto exchanges
         * @summary Crypto Exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoExchanges: async (options = {}) => {
            const localVarPath = `/crypto/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get crypto\'s profile.
         * @summary Crypto Profile
         * @param {string} symbol Crypto symbol such as BTC or ETH.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoProfile: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('cryptoProfile', 'symbol', symbol);
            const localVarPath = `/crypto/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List supported crypto symbols by exchange
         * @summary Crypto Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSymbols: async (exchange, options = {}) => {
            // verify required parameter 'exchange' is not null or undefined
            (0, common_1.assertParamExists)('cryptoSymbols', 'exchange', exchange);
            const localVarPath = `/crypto/symbol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (exchange !== undefined) {
                localVarQueryParameter['exchange'] = exchange;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
         * @summary Earnings Calendar
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {string} [symbol] Filter by symbol: AAPL.
         * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earningsCalendar: async (from, to, symbol, international, options = {}) => {
            const localVarPath = `/calendar/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (international !== undefined) {
                localVarQueryParameter['international'] = international;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
         * @summary Economic Calendar
         * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        economicCalendar: async (from, to, options = {}) => {
            const localVarPath = `/calendar/economic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List codes of supported economic data.
         * @summary Economic Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        economicCode: async (options = {}) => {
            const localVarPath = `/economic/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get economic data.
         * @summary Economic Data
         * @param {string} code Economic code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        economicData: async (code, options = {}) => {
            // verify required parameter 'code' is not null or undefined
            (0, common_1.assertParamExists)('economicData', 'code', code);
            const localVarPath = `/economic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ETF country exposure data.
         * @summary ETFs Country Exposure
         * @param {string} symbol ETF symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsCountryExposure: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('etfsCountryExposure', 'symbol', symbol);
            const localVarPath = `/etf/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
         * @summary ETFs Holdings
         * @param {string} [symbol] ETF symbol.
         * @param {string} [isin] ETF isin.
         * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
         * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsHoldings: async (symbol, isin, skip, date, options = {}) => {
            const localVarPath = `/etf/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ETF profile information. This endpoint has global coverage.
         * @summary ETFs Profile
         * @param {string} [symbol] ETF symbol.
         * @param {string} [isin] ETF isin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsProfile: async (symbol, isin, options = {}) => {
            const localVarPath = `/etf/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ETF sector exposure data.
         * @summary ETFs Sector Exposure
         * @param {string} symbol ETF symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsSectorExposure: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('etfsSectorExposure', 'symbol', symbol);
            const localVarPath = `/etf/sector`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
         * @summary FDA Committee Meeting Calendar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdaCommitteeMeetingCalendar: async (options = {}) => {
            const localVarPath = `/fda-advisory-committee-calendar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
         * @summary SEC Filings
         * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
         * @param {string} [cik] CIK.
         * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
         * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filings: async (symbol, cik, accessNumber, form, from, to, options = {}) => {
            const localVarPath = `/stock/filings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }
            if (accessNumber !== undefined) {
                localVarQueryParameter['accessNumber'] = accessNumber;
            }
            if (form !== undefined) {
                localVarQueryParameter['form'] = form;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
         * @summary SEC Sentiment Analysis
         * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsSentiment: async (accessNumber, options = {}) => {
            // verify required parameter 'accessNumber' is not null or undefined
            (0, common_1.assertParamExists)('filingsSentiment', 'accessNumber', accessNumber);
            const localVarPath = `/stock/filings-sentiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (accessNumber !== undefined) {
                localVarQueryParameter['accessNumber'] = accessNumber;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
         * @summary Financial Statements
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
         * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financials: async (symbol, statement, freq, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('financials', 'symbol', symbol);
            // verify required parameter 'statement' is not null or undefined
            (0, common_1.assertParamExists)('financials', 'statement', statement);
            // verify required parameter 'freq' is not null or undefined
            (0, common_1.assertParamExists)('financials', 'freq', freq);
            const localVarPath = `/stock/financials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (statement !== undefined) {
                localVarQueryParameter['statement'] = statement;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
         * @summary Financials As Reported
         * @param {string} [symbol] Symbol.
         * @param {string} [cik] CIK.
         * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
         * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financialsReported: async (symbol, cik, accessNumber, freq, options = {}) => {
            const localVarPath = `/stock/financials-reported`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }
            if (accessNumber !== undefined) {
                localVarQueryParameter['accessNumber'] = accessNumber;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get candlestick data for forex symbols.
         * @summary Forex Candles
         * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexCandles: async (symbol, resolution, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('forexCandles', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('forexCandles', 'resolution', resolution);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('forexCandles', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('forexCandles', 'to', to);
            const localVarPath = `/forex/candle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List supported forex exchanges
         * @summary Forex Exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexExchanges: async (options = {}) => {
            const localVarPath = `/forex/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get rates for all forex pairs. Ideal for currency conversion
         * @summary Forex rates
         * @param {string} [base] Base currency. Default to EUR.
         * @param {string} [date] Date. Leave blank to get the latest data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexRates: async (base, date, options = {}) => {
            const localVarPath = `/forex/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (base !== undefined) {
                localVarQueryParameter['base'] = base;
            }
            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List supported forex symbols.
         * @summary Forex Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexSymbols: async (exchange, options = {}) => {
            // verify required parameter 'exchange' is not null or undefined
            (0, common_1.assertParamExists)('forexSymbols', 'exchange', exchange);
            const localVarPath = `/forex/symbol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (exchange !== undefined) {
                localVarQueryParameter['exchange'] = exchange;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
         * @summary Fund Ownership
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of results. Leave empty to get the full list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundOwnership: async (symbol, limit, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('fundOwnership', 'symbol', symbol);
            const localVarPath = `/stock/fund-ownership`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Indices Constituents
         * @param {string} symbol symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indicesConstituents: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('indicesConstituents', 'symbol', symbol);
            const localVarPath = `/index/constituents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
         * @summary Indices Historical Constituents
         * @param {string} symbol symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indicesHistoricalConstituents: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('indicesHistoricalConstituents', 'symbol', symbol);
            const localVarPath = `/index/historical-constituents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
         * @summary Insider Sentiment
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} from From date: 2020-03-15.
         * @param {string} to To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insiderSentiment: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('insiderSentiment', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('insiderSentiment', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('insiderSentiment', 'to', to);
            const localVarPath = `/stock/insider-sentiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
         * @summary Insider Transactions
         * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insiderTransactions: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('insiderTransactions', 'symbol', symbol);
            const localVarPath = `/stock/insider-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
         * @summary International Filings
         * @param {string} [symbol] Symbol. Leave empty to list latest filings.
         * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        internationalFilings: async (symbol, country, options = {}) => {
            const localVarPath = `/stock/international-filings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
         * @summary Investment Themes (Thematic Investing)
         * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentThemes: async (theme, options = {}) => {
            // verify required parameter 'theme' is not null or undefined
            (0, common_1.assertParamExists)('investmentThemes', 'theme', theme);
            const localVarPath = `/stock/investment-theme`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (theme !== undefined) {
                localVarQueryParameter['theme'] = theme;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get recent and upcoming IPO.
         * @summary IPO Calendar
         * @param {string} from From date: 2020-03-15.
         * @param {string} to To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipoCalendar: async (from, to, options = {}) => {
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('ipoCalendar', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('ipoCalendar', 'to', to);
            const localVarPath = `/calendar/ipo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get latest market news.
         * @summary Market News
         * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
         * @param {number} [minId] Use this field to get only news after this ID. Default to 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketNews: async (category, minId, options = {}) => {
            // verify required parameter 'category' is not null or undefined
            (0, common_1.assertParamExists)('marketNews', 'category', category);
            const localVarPath = `/news`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }
            if (minId !== undefined) {
                localVarQueryParameter['minId'] = minId;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Mutual Funds country exposure data.
         * @summary Mutual Funds Country Exposure
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundCountryExposure: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('mutualFundCountryExposure', 'symbol', symbol);
            const localVarPath = `/mutual-fund/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
         * @summary Mutual Funds Holdings
         * @param {string} [symbol] Fund\&#39;s symbol.
         * @param {string} [isin] Fund\&#39;s isin.
         * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundHoldings: async (symbol, isin, skip, options = {}) => {
            const localVarPath = `/mutual-fund/holdings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
         * @summary Mutual Funds Profile
         * @param {string} [symbol] Fund\&#39;s symbol.
         * @param {string} [isin] Fund\&#39;s isin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundProfile: async (symbol, isin, options = {}) => {
            const localVarPath = `/mutual-fund/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (isin !== undefined) {
                localVarQueryParameter['isin'] = isin;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Mutual Funds sector exposure data.
         * @summary Mutual Funds Sector Exposure
         * @param {string} symbol Mutual Fund symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundSectorExposure: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('mutualFundSectorExposure', 'symbol', symbol);
            const localVarPath = `/mutual-fund/sector`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
         * @summary News Sentiment
         * @param {string} symbol Company symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsSentiment: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('newsSentiment', 'symbol', symbol);
            const localVarPath = `/news-sentiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
         * @summary Ownership
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of results. Leave empty to get the full list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownership: async (symbol, limit, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('ownership', 'symbol', symbol);
            const localVarPath = `/stock/ownership`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
         * @summary Pattern Recognition
         * @param {string} symbol Symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patternRecognition: async (symbol, resolution, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('patternRecognition', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('patternRecognition', 'resolution', resolution);
            const localVarPath = `/scan/pattern`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
         * @summary Major Press Releases
         * @param {string} symbol Company symbol.
         * @param {string} [from] From time: 2020-01-01.
         * @param {string} [to] To time: 2020-01-05.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pressReleases: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('pressReleases', 'symbol', symbol);
            const localVarPath = `/press-releases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get latest price target consensus.
         * @summary Price Target
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceTarget: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('priceTarget', 'symbol', symbol);
            const localVarPath = `/stock/price-target`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
         * @summary Quote
         * @param {string} symbol Symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quote: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('quote', 'symbol', symbol);
            const localVarPath = `/quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get latest analyst recommendation trends for a company.
         * @summary Recommendation Trends
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationTrends: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('recommendationTrends', 'symbol', symbol);
            const localVarPath = `/stock/recommendation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
         * @summary Revenue Breakdown
         * @param {string} [symbol] Symbol.
         * @param {string} [cik] CIK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueBreakdown: async (symbol, cik, options = {}) => {
            const localVarPath = `/stock/revenue-breakdown`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
         * @summary Similarity Index
         * @param {string} [symbol] Symbol. Required if cik is empty
         * @param {string} [cik] CIK. Required if symbol is empty
         * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarityIndex: async (symbol, cik, freq, options = {}) => {
            const localVarPath = `/stock/similarity-index`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (cik !== undefined) {
                localVarQueryParameter['cik'] = cik;
            }
            if (freq !== undefined) {
                localVarQueryParameter['freq'] = freq;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
         * @summary Social Sentiment
         * @param {string} symbol Company symbol.
         * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialSentiment: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('socialSentiment', 'symbol', symbol);
            const localVarPath = `/stock/social-sentiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get global dividends data.
         * @summary Dividends 2 (Basic)
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockBasicDividends: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockBasicDividends', 'symbol', symbol);
            const localVarPath = `/stock/dividend2`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get last bid/ask data for US stocks.
         * @summary Last Bid-Ask
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockBidask: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockBidask', 'symbol', symbol);
            const localVarPath = `/stock/bidask`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
         * @summary Stock Candles
         * @param {string} symbol Symbol.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockCandles: async (symbol, resolution, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockCandles', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('stockCandles', 'resolution', resolution);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockCandles', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockCandles', 'to', to);
            const localVarPath = `/stock/candle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get dividends data for common stocks going back 30 years.
         * @summary Dividends
         * @param {string} symbol Symbol.
         * @param {string} from YYYY-MM-DD.
         * @param {string} to YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDividends: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockDividends', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockDividends', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockDividends', 'to', to);
            const localVarPath = `/stock/dividend`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of reported lobbying activities in the Senate and the House.
         * @summary Senate Lobbying
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockLobbying: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockLobbying', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockLobbying', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockLobbying', 'to', to);
            const localVarPath = `/stock/lobbying`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
         * @summary Historical NBBO
         * @param {string} symbol Symbol.
         * @param {string} date Date: 2020-04-02.
         * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
         * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockNbbo: async (symbol, date, limit, skip, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockNbbo', 'symbol', symbol);
            // verify required parameter 'date' is not null or undefined
            (0, common_1.assertParamExists)('stockNbbo', 'date', date);
            // verify required parameter 'limit' is not null or undefined
            (0, common_1.assertParamExists)('stockNbbo', 'limit', limit);
            // verify required parameter 'skip' is not null or undefined
            (0, common_1.assertParamExists)('stockNbbo', 'skip', skip);
            const localVarPath = `/stock/bbo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (date !== undefined) {
                localVarQueryParameter['date'] = date instanceof Date ? date.toISOString().substr(0, 10) : date;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get splits data for stocks.
         * @summary Splits
         * @param {string} symbol Symbol.
         * @param {string} from YYYY-MM-DD.
         * @param {string} to YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockSplits: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockSplits', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockSplits', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockSplits', 'to', to);
            const localVarPath = `/stock/split`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Stock Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
         * @param {string} [mic] Filter by MIC code.
         * @param {string} [securityType] Filter by security type used by OpenFigi standard.
         * @param {string} [currency] Filter by currency.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockSymbols: async (exchange, mic, securityType, currency, options = {}) => {
            // verify required parameter 'exchange' is not null or undefined
            (0, common_1.assertParamExists)('stockSymbols', 'exchange', exchange);
            const localVarPath = `/stock/symbol`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (exchange !== undefined) {
                localVarQueryParameter['exchange'] = exchange;
            }
            if (mic !== undefined) {
                localVarQueryParameter['mic'] = mic;
            }
            if (securityType !== undefined) {
                localVarQueryParameter['securityType'] = securityType;
            }
            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
         * @summary Tick Data
         * @param {string} symbol Symbol.
         * @param {string} date Date: 2020-04-02.
         * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
         * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockTick: async (symbol, date, limit, skip, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockTick', 'symbol', symbol);
            // verify required parameter 'date' is not null or undefined
            (0, common_1.assertParamExists)('stockTick', 'date', date);
            // verify required parameter 'limit' is not null or undefined
            (0, common_1.assertParamExists)('stockTick', 'limit', limit);
            // verify required parameter 'skip' is not null or undefined
            (0, common_1.assertParamExists)('stockTick', 'skip', skip);
            const localVarPath = `/stock/tick`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (date !== undefined) {
                localVarQueryParameter['date'] = date instanceof Date ? date.toISOString().substr(0, 10) : date;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
         * @summary USA Spending
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockUsaSpending: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockUsaSpending', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockUsaSpending', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockUsaSpending', 'to', to);
            const localVarPath = `/stock/usa-spending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List USPTO patents for companies. Limit to 250 records per API call.
         * @summary USPTO Patents
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockUsptoPatent: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockUsptoPatent', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockUsptoPatent', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockUsptoPatent', 'to', to);
            const localVarPath = `/stock/uspto-patent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
         * @summary H1-B Visa Application
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockVisaApplication: async (symbol, from, to, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('stockVisaApplication', 'symbol', symbol);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('stockVisaApplication', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('stockVisaApplication', 'to', to);
            const localVarPath = `/stock/visa-application`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
         * @summary Supply Chain Relationships
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyChainRelationships: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('supplyChainRelationships', 'symbol', symbol);
            const localVarPath = `/stock/supply-chain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get support and resistance levels for a symbol.
         * @summary Support/Resistance
         * @param {string} symbol Symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportResistance: async (symbol, resolution, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('supportResistance', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('supportResistance', 'resolution', resolution);
            const localVarPath = `/scan/support-resistance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
         * @summary Symbol Lookup
         * @param {string} q Query text can be symbol, name, isin, or cusip.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearch: async (q, options = {}) => {
            // verify required parameter 'q' is not null or undefined
            (0, common_1.assertParamExists)('symbolSearch', 'q', q);
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Technical Indicators
         * @param {string} symbol symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
         * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technicalIndicator: async (symbol, resolution, from, to, indicator, indicatorFields, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('technicalIndicator', 'symbol', symbol);
            // verify required parameter 'resolution' is not null or undefined
            (0, common_1.assertParamExists)('technicalIndicator', 'resolution', resolution);
            // verify required parameter 'from' is not null or undefined
            (0, common_1.assertParamExists)('technicalIndicator', 'from', from);
            // verify required parameter 'to' is not null or undefined
            (0, common_1.assertParamExists)('technicalIndicator', 'to', to);
            // verify required parameter 'indicator' is not null or undefined
            (0, common_1.assertParamExists)('technicalIndicator', 'indicator', indicator);
            const localVarPath = `/indicator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }
            if (indicator !== undefined) {
                localVarQueryParameter['indicator'] = indicator;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(indicatorFields, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
         * @summary Earnings Call Transcripts
         * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcripts: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('transcripts', 'id', id);
            const localVarPath = `/stock/transcripts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
         * @summary Earnings Call Transcripts List
         * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcriptsList: async (symbol, options = {}) => {
            // verify required parameter 'symbol' is not null or undefined
            (0, common_1.assertParamExists)('transcriptsList', 'symbol', symbol);
            const localVarPath = `/stock/transcripts/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get latest stock upgrade and downgrade.
         * @summary Stock Upgrade/Downgrade
         * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
         * @param {string} [from] From date: 2000-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeDowngrade: async (symbol, from, to, options = {}) => {
            const localVarPath = `/stock/upgrade-downgrade`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            await (0, common_1.setApiKeyToObject)(localVarQueryParameter, 'token', configuration);
            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }
            if (from !== undefined) {
                localVarQueryParameter['from'] = from instanceof Date ? from.toISOString().substr(0, 10) : from;
            }
            if (to !== undefined) {
                localVarQueryParameter['to'] = to instanceof Date ? to.toISOString().substr(0, 10) : to;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.DefaultApiAxiosParamCreator = DefaultApiAxiosParamCreator;
/**
 * DefaultApi - functional programming interface
 * @export
 */
const DefaultApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DefaultApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
         * @summary Aggregate Indicators
         * @param {string} symbol symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aggregateIndicator(symbol, resolution, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aggregateIndicator(symbol, resolution, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get end-of-day bond\'s price data.
         * @summary Bond price data
         * @param {string} isin ISIN.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bondPrice(isin, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bondPrice(isin, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
         * @summary Bond Profile
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {string} [figi] FIGI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bondProfile(isin, cusip, figi, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bondProfile(isin, cusip, figi, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
         * @summary Basic Financials
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyBasicFinancials(symbol, metric, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyBasicFinancials(symbol, metric, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company historical quarterly earnings surprise going back to 2000.
         * @summary Earnings Surprises
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyEarnings(symbol, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyEarnings(symbol, limit, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
         * @summary Company Earnings Quality Score
         * @param {string} symbol Symbol.
         * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyEarningsQualityScore(symbol, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyEarningsQualityScore(symbol, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company\'s ebit estimates.
         * @summary EBIT Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyEbitEstimates(symbol, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyEbitEstimates(symbol, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company\'s ebitda estimates.
         * @summary EBITDA Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyEbitdaEstimates(symbol, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyEbitdaEstimates(symbol, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company\'s EPS estimates.
         * @summary Earnings Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyEpsEstimates(symbol, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyEpsEstimates(symbol, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
         * @summary Company ESG Scores
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyEsgScore(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyEsgScore(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a list of company\'s executives and members of the Board.
         * @summary Company Executive
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyExecutive(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyExecutive(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List latest company news by symbol. This endpoint is only available for North American companies.
         * @summary Company News
         * @param {string} symbol Company symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyNews(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyNews(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company peers. Return a list of peers in the same country and sub-industry
         * @summary Peers
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyPeers(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyPeers(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get general information of a company. You can query by symbol, ISIN or CUSIP
         * @summary Company Profile
         * @param {string} [symbol] Symbol of the company: AAPL e.g.
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyProfile(symbol, isin, cusip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyProfile(symbol, isin, cusip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
         * @summary Company Profile 2
         * @param {string} [symbol] Symbol of the company: AAPL e.g.
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyProfile2(symbol, isin, cusip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyProfile2(symbol, isin, cusip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company\'s revenue estimates.
         * @summary Revenue Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyRevenueEstimates(symbol, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyRevenueEstimates(symbol, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List all countries and metadata.
         * @summary Country Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async country(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.country(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
         * @summary COVID-19
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async covid19(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.covid19(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get candlestick data for crypto symbols.
         * @summary Crypto Candles
         * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoCandles(symbol, resolution, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoCandles(symbol, resolution, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List supported crypto exchanges
         * @summary Crypto Exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoExchanges(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoExchanges(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get crypto\'s profile.
         * @summary Crypto Profile
         * @param {string} symbol Crypto symbol such as BTC or ETH.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoProfile(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoProfile(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List supported crypto symbols by exchange
         * @summary Crypto Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoSymbols(exchange, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoSymbols(exchange, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
         * @summary Earnings Calendar
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {string} [symbol] Filter by symbol: AAPL.
         * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async earningsCalendar(from, to, symbol, international, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.earningsCalendar(from, to, symbol, international, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
         * @summary Economic Calendar
         * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async economicCalendar(from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.economicCalendar(from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List codes of supported economic data.
         * @summary Economic Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async economicCode(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.economicCode(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get economic data.
         * @summary Economic Data
         * @param {string} code Economic code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async economicData(code, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.economicData(code, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get ETF country exposure data.
         * @summary ETFs Country Exposure
         * @param {string} symbol ETF symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etfsCountryExposure(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etfsCountryExposure(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
         * @summary ETFs Holdings
         * @param {string} [symbol] ETF symbol.
         * @param {string} [isin] ETF isin.
         * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
         * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etfsHoldings(symbol, isin, skip, date, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etfsHoldings(symbol, isin, skip, date, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get ETF profile information. This endpoint has global coverage.
         * @summary ETFs Profile
         * @param {string} [symbol] ETF symbol.
         * @param {string} [isin] ETF isin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etfsProfile(symbol, isin, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etfsProfile(symbol, isin, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get ETF sector exposure data.
         * @summary ETFs Sector Exposure
         * @param {string} symbol ETF symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async etfsSectorExposure(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.etfsSectorExposure(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
         * @summary FDA Committee Meeting Calendar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fdaCommitteeMeetingCalendar(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fdaCommitteeMeetingCalendar(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
         * @summary SEC Filings
         * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
         * @param {string} [cik] CIK.
         * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
         * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filings(symbol, cik, accessNumber, form, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filings(symbol, cik, accessNumber, form, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
         * @summary SEC Sentiment Analysis
         * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filingsSentiment(accessNumber, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filingsSentiment(accessNumber, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
         * @summary Financial Statements
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
         * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financials(symbol, statement, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financials(symbol, statement, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
         * @summary Financials As Reported
         * @param {string} [symbol] Symbol.
         * @param {string} [cik] CIK.
         * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
         * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async financialsReported(symbol, cik, accessNumber, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.financialsReported(symbol, cik, accessNumber, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get candlestick data for forex symbols.
         * @summary Forex Candles
         * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forexCandles(symbol, resolution, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forexCandles(symbol, resolution, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List supported forex exchanges
         * @summary Forex Exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forexExchanges(options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forexExchanges(options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get rates for all forex pairs. Ideal for currency conversion
         * @summary Forex rates
         * @param {string} [base] Base currency. Default to EUR.
         * @param {string} [date] Date. Leave blank to get the latest data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forexRates(base, date, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forexRates(base, date, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List supported forex symbols.
         * @summary Forex Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forexSymbols(exchange, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forexSymbols(exchange, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
         * @summary Fund Ownership
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of results. Leave empty to get the full list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fundOwnership(symbol, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fundOwnership(symbol, limit, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Indices Constituents
         * @param {string} symbol symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indicesConstituents(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indicesConstituents(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
         * @summary Indices Historical Constituents
         * @param {string} symbol symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async indicesHistoricalConstituents(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.indicesHistoricalConstituents(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
         * @summary Insider Sentiment
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} from From date: 2020-03-15.
         * @param {string} to To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insiderSentiment(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insiderSentiment(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
         * @summary Insider Transactions
         * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async insiderTransactions(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.insiderTransactions(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
         * @summary International Filings
         * @param {string} [symbol] Symbol. Leave empty to list latest filings.
         * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async internationalFilings(symbol, country, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.internationalFilings(symbol, country, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
         * @summary Investment Themes (Thematic Investing)
         * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async investmentThemes(theme, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.investmentThemes(theme, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get recent and upcoming IPO.
         * @summary IPO Calendar
         * @param {string} from From date: 2020-03-15.
         * @param {string} to To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipoCalendar(from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ipoCalendar(from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get latest market news.
         * @summary Market News
         * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
         * @param {number} [minId] Use this field to get only news after this ID. Default to 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketNews(category, minId, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.marketNews(category, minId, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get Mutual Funds country exposure data.
         * @summary Mutual Funds Country Exposure
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mutualFundCountryExposure(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mutualFundCountryExposure(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
         * @summary Mutual Funds Holdings
         * @param {string} [symbol] Fund\&#39;s symbol.
         * @param {string} [isin] Fund\&#39;s isin.
         * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mutualFundHoldings(symbol, isin, skip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mutualFundHoldings(symbol, isin, skip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
         * @summary Mutual Funds Profile
         * @param {string} [symbol] Fund\&#39;s symbol.
         * @param {string} [isin] Fund\&#39;s isin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mutualFundProfile(symbol, isin, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mutualFundProfile(symbol, isin, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get Mutual Funds sector exposure data.
         * @summary Mutual Funds Sector Exposure
         * @param {string} symbol Mutual Fund symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mutualFundSectorExposure(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mutualFundSectorExposure(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
         * @summary News Sentiment
         * @param {string} symbol Company symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newsSentiment(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newsSentiment(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
         * @summary Ownership
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of results. Leave empty to get the full list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ownership(symbol, limit, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ownership(symbol, limit, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
         * @summary Pattern Recognition
         * @param {string} symbol Symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patternRecognition(symbol, resolution, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patternRecognition(symbol, resolution, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
         * @summary Major Press Releases
         * @param {string} symbol Company symbol.
         * @param {string} [from] From time: 2020-01-01.
         * @param {string} [to] To time: 2020-01-05.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pressReleases(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pressReleases(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get latest price target consensus.
         * @summary Price Target
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async priceTarget(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.priceTarget(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
         * @summary Quote
         * @param {string} symbol Symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quote(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.quote(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get latest analyst recommendation trends for a company.
         * @summary Recommendation Trends
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recommendationTrends(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recommendationTrends(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
         * @summary Revenue Breakdown
         * @param {string} [symbol] Symbol.
         * @param {string} [cik] CIK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revenueBreakdown(symbol, cik, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revenueBreakdown(symbol, cik, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
         * @summary Similarity Index
         * @param {string} [symbol] Symbol. Required if cik is empty
         * @param {string} [cik] CIK. Required if symbol is empty
         * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async similarityIndex(symbol, cik, freq, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.similarityIndex(symbol, cik, freq, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
         * @summary Social Sentiment
         * @param {string} symbol Company symbol.
         * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async socialSentiment(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.socialSentiment(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get global dividends data.
         * @summary Dividends 2 (Basic)
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockBasicDividends(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockBasicDividends(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get last bid/ask data for US stocks.
         * @summary Last Bid-Ask
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockBidask(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockBidask(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
         * @summary Stock Candles
         * @param {string} symbol Symbol.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockCandles(symbol, resolution, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockCandles(symbol, resolution, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get dividends data for common stocks going back 30 years.
         * @summary Dividends
         * @param {string} symbol Symbol.
         * @param {string} from YYYY-MM-DD.
         * @param {string} to YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockDividends(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockDividends(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a list of reported lobbying activities in the Senate and the House.
         * @summary Senate Lobbying
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockLobbying(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockLobbying(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
         * @summary Historical NBBO
         * @param {string} symbol Symbol.
         * @param {string} date Date: 2020-04-02.
         * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
         * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockNbbo(symbol, date, limit, skip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockNbbo(symbol, date, limit, skip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get splits data for stocks.
         * @summary Splits
         * @param {string} symbol Symbol.
         * @param {string} from YYYY-MM-DD.
         * @param {string} to YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockSplits(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockSplits(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Stock Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
         * @param {string} [mic] Filter by MIC code.
         * @param {string} [securityType] Filter by security type used by OpenFigi standard.
         * @param {string} [currency] Filter by currency.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockSymbols(exchange, mic, securityType, currency, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockSymbols(exchange, mic, securityType, currency, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
         * @summary Tick Data
         * @param {string} symbol Symbol.
         * @param {string} date Date: 2020-04-02.
         * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
         * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockTick(symbol, date, limit, skip, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockTick(symbol, date, limit, skip, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
         * @summary USA Spending
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockUsaSpending(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockUsaSpending(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List USPTO patents for companies. Limit to 250 records per API call.
         * @summary USPTO Patents
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockUsptoPatent(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockUsptoPatent(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
         * @summary H1-B Visa Application
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stockVisaApplication(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stockVisaApplication(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
         * @summary Supply Chain Relationships
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyChainRelationships(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyChainRelationships(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get support and resistance levels for a symbol.
         * @summary Support/Resistance
         * @param {string} symbol Symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supportResistance(symbol, resolution, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supportResistance(symbol, resolution, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
         * @summary Symbol Lookup
         * @param {string} q Query text can be symbol, name, isin, or cusip.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async symbolSearch(q, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.symbolSearch(q, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Technical Indicators
         * @param {string} symbol symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
         * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
         * @summary Earnings Call Transcripts
         * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcripts(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcripts(id, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
         * @summary Earnings Call Transcripts List
         * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transcriptsList(symbol, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transcriptsList(symbol, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         * Get latest stock upgrade and downgrade.
         * @summary Stock Upgrade/Downgrade
         * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
         * @param {string} [from] From date: 2000-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upgradeDowngrade(symbol, from, to, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upgradeDowngrade(symbol, from, to, options);
            return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.DefaultApiFp = DefaultApiFp;
/**
 * DefaultApi - factory interface
 * @export
 */
const DefaultApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DefaultApiFp)(configuration);
    return {
        /**
         * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
         * @summary Aggregate Indicators
         * @param {string} symbol symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aggregateIndicator(symbol, resolution, options) {
            return localVarFp.aggregateIndicator(symbol, resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * Get end-of-day bond\'s price data.
         * @summary Bond price data
         * @param {string} isin ISIN.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bondPrice(isin, from, to, options) {
            return localVarFp.bondPrice(isin, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
         * @summary Bond Profile
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {string} [figi] FIGI
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bondProfile(isin, cusip, figi, options) {
            return localVarFp.bondProfile(isin, cusip, figi, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
         * @summary Basic Financials
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyBasicFinancials(symbol, metric, options) {
            return localVarFp.companyBasicFinancials(symbol, metric, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company historical quarterly earnings surprise going back to 2000.
         * @summary Earnings Surprises
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEarnings(symbol, limit, options) {
            return localVarFp.companyEarnings(symbol, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
         * @summary Company Earnings Quality Score
         * @param {string} symbol Symbol.
         * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEarningsQualityScore(symbol, freq, options) {
            return localVarFp.companyEarningsQualityScore(symbol, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company\'s ebit estimates.
         * @summary EBIT Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEbitEstimates(symbol, freq, options) {
            return localVarFp.companyEbitEstimates(symbol, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company\'s ebitda estimates.
         * @summary EBITDA Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEbitdaEstimates(symbol, freq, options) {
            return localVarFp.companyEbitdaEstimates(symbol, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company\'s EPS estimates.
         * @summary Earnings Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEpsEstimates(symbol, freq, options) {
            return localVarFp.companyEpsEstimates(symbol, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
         * @summary Company ESG Scores
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyEsgScore(symbol, options) {
            return localVarFp.companyEsgScore(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of company\'s executives and members of the Board.
         * @summary Company Executive
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyExecutive(symbol, options) {
            return localVarFp.companyExecutive(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * List latest company news by symbol. This endpoint is only available for North American companies.
         * @summary Company News
         * @param {string} symbol Company symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyNews(symbol, from, to, options) {
            return localVarFp.companyNews(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company peers. Return a list of peers in the same country and sub-industry
         * @summary Peers
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyPeers(symbol, options) {
            return localVarFp.companyPeers(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get general information of a company. You can query by symbol, ISIN or CUSIP
         * @summary Company Profile
         * @param {string} [symbol] Symbol of the company: AAPL e.g.
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyProfile(symbol, isin, cusip, options) {
            return localVarFp.companyProfile(symbol, isin, cusip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
         * @summary Company Profile 2
         * @param {string} [symbol] Symbol of the company: AAPL e.g.
         * @param {string} [isin] ISIN
         * @param {string} [cusip] CUSIP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyProfile2(symbol, isin, cusip, options) {
            return localVarFp.companyProfile2(symbol, isin, cusip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company\'s revenue estimates.
         * @summary Revenue Estimates
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyRevenueEstimates(symbol, freq, options) {
            return localVarFp.companyRevenueEstimates(symbol, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * List all countries and metadata.
         * @summary Country Metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        country(options) {
            return localVarFp.country(options).then((request) => request(axios, basePath));
        },
        /**
         * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
         * @summary COVID-19
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        covid19(options) {
            return localVarFp.covid19(options).then((request) => request(axios, basePath));
        },
        /**
         * Get candlestick data for crypto symbols.
         * @summary Crypto Candles
         * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoCandles(symbol, resolution, from, to, options) {
            return localVarFp.cryptoCandles(symbol, resolution, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * List supported crypto exchanges
         * @summary Crypto Exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoExchanges(options) {
            return localVarFp.cryptoExchanges(options).then((request) => request(axios, basePath));
        },
        /**
         * Get crypto\'s profile.
         * @summary Crypto Profile
         * @param {string} symbol Crypto symbol such as BTC or ETH.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoProfile(symbol, options) {
            return localVarFp.cryptoProfile(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * List supported crypto symbols by exchange
         * @summary Crypto Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSymbols(exchange, options) {
            return localVarFp.cryptoSymbols(exchange, options).then((request) => request(axios, basePath));
        },
        /**
         * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
         * @summary Earnings Calendar
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {string} [symbol] Filter by symbol: AAPL.
         * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        earningsCalendar(from, to, symbol, international, options) {
            return localVarFp.earningsCalendar(from, to, symbol, international, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
         * @summary Economic Calendar
         * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        economicCalendar(from, to, options) {
            return localVarFp.economicCalendar(from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * List codes of supported economic data.
         * @summary Economic Code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        economicCode(options) {
            return localVarFp.economicCode(options).then((request) => request(axios, basePath));
        },
        /**
         * Get economic data.
         * @summary Economic Data
         * @param {string} code Economic code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        economicData(code, options) {
            return localVarFp.economicData(code, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ETF country exposure data.
         * @summary ETFs Country Exposure
         * @param {string} symbol ETF symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsCountryExposure(symbol, options) {
            return localVarFp.etfsCountryExposure(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
         * @summary ETFs Holdings
         * @param {string} [symbol] ETF symbol.
         * @param {string} [isin] ETF isin.
         * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
         * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsHoldings(symbol, isin, skip, date, options) {
            return localVarFp.etfsHoldings(symbol, isin, skip, date, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ETF profile information. This endpoint has global coverage.
         * @summary ETFs Profile
         * @param {string} [symbol] ETF symbol.
         * @param {string} [isin] ETF isin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsProfile(symbol, isin, options) {
            return localVarFp.etfsProfile(symbol, isin, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ETF sector exposure data.
         * @summary ETFs Sector Exposure
         * @param {string} symbol ETF symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        etfsSectorExposure(symbol, options) {
            return localVarFp.etfsSectorExposure(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
         * @summary FDA Committee Meeting Calendar
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fdaCommitteeMeetingCalendar(options) {
            return localVarFp.fdaCommitteeMeetingCalendar(options).then((request) => request(axios, basePath));
        },
        /**
         * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
         * @summary SEC Filings
         * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
         * @param {string} [cik] CIK.
         * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
         * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filings(symbol, cik, accessNumber, form, from, to, options) {
            return localVarFp.filings(symbol, cik, accessNumber, form, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
         * @summary SEC Sentiment Analysis
         * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsSentiment(accessNumber, options) {
            return localVarFp.filingsSentiment(accessNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
         * @summary Financial Statements
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
         * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financials(symbol, statement, freq, options) {
            return localVarFp.financials(symbol, statement, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
         * @summary Financials As Reported
         * @param {string} [symbol] Symbol.
         * @param {string} [cik] CIK.
         * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
         * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        financialsReported(symbol, cik, accessNumber, freq, options) {
            return localVarFp.financialsReported(symbol, cik, accessNumber, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * Get candlestick data for forex symbols.
         * @summary Forex Candles
         * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexCandles(symbol, resolution, from, to, options) {
            return localVarFp.forexCandles(symbol, resolution, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * List supported forex exchanges
         * @summary Forex Exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexExchanges(options) {
            return localVarFp.forexExchanges(options).then((request) => request(axios, basePath));
        },
        /**
         * Get rates for all forex pairs. Ideal for currency conversion
         * @summary Forex rates
         * @param {string} [base] Base currency. Default to EUR.
         * @param {string} [date] Date. Leave blank to get the latest data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexRates(base, date, options) {
            return localVarFp.forexRates(base, date, options).then((request) => request(axios, basePath));
        },
        /**
         * List supported forex symbols.
         * @summary Forex Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forexSymbols(exchange, options) {
            return localVarFp.forexSymbols(exchange, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
         * @summary Fund Ownership
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of results. Leave empty to get the full list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fundOwnership(symbol, limit, options) {
            return localVarFp.fundOwnership(symbol, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Indices Constituents
         * @param {string} symbol symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indicesConstituents(symbol, options) {
            return localVarFp.indicesConstituents(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
         * @summary Indices Historical Constituents
         * @param {string} symbol symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        indicesHistoricalConstituents(symbol, options) {
            return localVarFp.indicesHistoricalConstituents(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
         * @summary Insider Sentiment
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {string} from From date: 2020-03-15.
         * @param {string} to To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insiderSentiment(symbol, from, to, options) {
            return localVarFp.insiderSentiment(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
         * @summary Insider Transactions
         * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
         * @param {string} [from] From date: 2020-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        insiderTransactions(symbol, from, to, options) {
            return localVarFp.insiderTransactions(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
         * @summary International Filings
         * @param {string} [symbol] Symbol. Leave empty to list latest filings.
         * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        internationalFilings(symbol, country, options) {
            return localVarFp.internationalFilings(symbol, country, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
         * @summary Investment Themes (Thematic Investing)
         * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        investmentThemes(theme, options) {
            return localVarFp.investmentThemes(theme, options).then((request) => request(axios, basePath));
        },
        /**
         * Get recent and upcoming IPO.
         * @summary IPO Calendar
         * @param {string} from From date: 2020-03-15.
         * @param {string} to To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipoCalendar(from, to, options) {
            return localVarFp.ipoCalendar(from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get latest market news.
         * @summary Market News
         * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
         * @param {number} [minId] Use this field to get only news after this ID. Default to 0
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketNews(category, minId, options) {
            return localVarFp.marketNews(category, minId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Mutual Funds country exposure data.
         * @summary Mutual Funds Country Exposure
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundCountryExposure(symbol, options) {
            return localVarFp.mutualFundCountryExposure(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
         * @summary Mutual Funds Holdings
         * @param {string} [symbol] Fund\&#39;s symbol.
         * @param {string} [isin] Fund\&#39;s isin.
         * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundHoldings(symbol, isin, skip, options) {
            return localVarFp.mutualFundHoldings(symbol, isin, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
         * @summary Mutual Funds Profile
         * @param {string} [symbol] Fund\&#39;s symbol.
         * @param {string} [isin] Fund\&#39;s isin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundProfile(symbol, isin, options) {
            return localVarFp.mutualFundProfile(symbol, isin, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Mutual Funds sector exposure data.
         * @summary Mutual Funds Sector Exposure
         * @param {string} symbol Mutual Fund symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mutualFundSectorExposure(symbol, options) {
            return localVarFp.mutualFundSectorExposure(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
         * @summary News Sentiment
         * @param {string} symbol Company symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newsSentiment(symbol, options) {
            return localVarFp.newsSentiment(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
         * @summary Ownership
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {number} [limit] Limit number of results. Leave empty to get the full list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ownership(symbol, limit, options) {
            return localVarFp.ownership(symbol, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
         * @summary Pattern Recognition
         * @param {string} symbol Symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patternRecognition(symbol, resolution, options) {
            return localVarFp.patternRecognition(symbol, resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
         * @summary Major Press Releases
         * @param {string} symbol Company symbol.
         * @param {string} [from] From time: 2020-01-01.
         * @param {string} [to] To time: 2020-01-05.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pressReleases(symbol, from, to, options) {
            return localVarFp.pressReleases(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get latest price target consensus.
         * @summary Price Target
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        priceTarget(symbol, options) {
            return localVarFp.priceTarget(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
         * @summary Quote
         * @param {string} symbol Symbol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quote(symbol, options) {
            return localVarFp.quote(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get latest analyst recommendation trends for a company.
         * @summary Recommendation Trends
         * @param {string} symbol Symbol of the company: AAPL.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recommendationTrends(symbol, options) {
            return localVarFp.recommendationTrends(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
         * @summary Revenue Breakdown
         * @param {string} [symbol] Symbol.
         * @param {string} [cik] CIK.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revenueBreakdown(symbol, cik, options) {
            return localVarFp.revenueBreakdown(symbol, cik, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
         * @summary Similarity Index
         * @param {string} [symbol] Symbol. Required if cik is empty
         * @param {string} [cik] CIK. Required if symbol is empty
         * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        similarityIndex(symbol, cik, freq, options) {
            return localVarFp.similarityIndex(symbol, cik, freq, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
         * @summary Social Sentiment
         * @param {string} symbol Company symbol.
         * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        socialSentiment(symbol, from, to, options) {
            return localVarFp.socialSentiment(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get global dividends data.
         * @summary Dividends 2 (Basic)
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockBasicDividends(symbol, options) {
            return localVarFp.stockBasicDividends(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get last bid/ask data for US stocks.
         * @summary Last Bid-Ask
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockBidask(symbol, options) {
            return localVarFp.stockBidask(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
         * @summary Stock Candles
         * @param {string} symbol Symbol.
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockCandles(symbol, resolution, from, to, options) {
            return localVarFp.stockCandles(symbol, resolution, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get dividends data for common stocks going back 30 years.
         * @summary Dividends
         * @param {string} symbol Symbol.
         * @param {string} from YYYY-MM-DD.
         * @param {string} to YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockDividends(symbol, from, to, options) {
            return localVarFp.stockDividends(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of reported lobbying activities in the Senate and the House.
         * @summary Senate Lobbying
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockLobbying(symbol, from, to, options) {
            return localVarFp.stockLobbying(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
         * @summary Historical NBBO
         * @param {string} symbol Symbol.
         * @param {string} date Date: 2020-04-02.
         * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
         * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockNbbo(symbol, date, limit, skip, options) {
            return localVarFp.stockNbbo(symbol, date, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get splits data for stocks.
         * @summary Splits
         * @param {string} symbol Symbol.
         * @param {string} from YYYY-MM-DD.
         * @param {string} to YYYY-MM-DD.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockSplits(symbol, from, to, options) {
            return localVarFp.stockSplits(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Stock Symbol
         * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
         * @param {string} [mic] Filter by MIC code.
         * @param {string} [securityType] Filter by security type used by OpenFigi standard.
         * @param {string} [currency] Filter by currency.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockSymbols(exchange, mic, securityType, currency, options) {
            return localVarFp.stockSymbols(exchange, mic, securityType, currency, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
         * @summary Tick Data
         * @param {string} symbol Symbol.
         * @param {string} date Date: 2020-04-02.
         * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
         * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockTick(symbol, date, limit, skip, options) {
            return localVarFp.stockTick(symbol, date, limit, skip, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
         * @summary USA Spending
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockUsaSpending(symbol, from, to, options) {
            return localVarFp.stockUsaSpending(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * List USPTO patents for companies. Limit to 250 records per API call.
         * @summary USPTO Patents
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockUsptoPatent(symbol, from, to, options) {
            return localVarFp.stockUsptoPatent(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
         * @summary H1-B Visa Application
         * @param {string} symbol Symbol.
         * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
         * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stockVisaApplication(symbol, from, to, options) {
            return localVarFp.stockVisaApplication(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
         * @summary Supply Chain Relationships
         * @param {string} symbol Symbol.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyChainRelationships(symbol, options) {
            return localVarFp.supplyChainRelationships(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get support and resistance levels for a symbol.
         * @summary Support/Resistance
         * @param {string} symbol Symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportResistance(symbol, resolution, options) {
            return localVarFp.supportResistance(symbol, resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
         * @summary Symbol Lookup
         * @param {string} q Query text can be symbol, name, isin, or cusip.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearch(q, options) {
            return localVarFp.symbolSearch(q, options).then((request) => request(axios, basePath));
        },
        /**
         * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
         * @summary Technical Indicators
         * @param {string} symbol symbol
         * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
         * @param {number} from UNIX timestamp. Interval initial value.
         * @param {number} to UNIX timestamp. Interval end value.
         * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
         * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, options) {
            return localVarFp.technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, options).then((request) => request(axios, basePath));
        },
        /**
         * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
         * @summary Earnings Call Transcripts
         * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcripts(id, options) {
            return localVarFp.transcripts(id, options).then((request) => request(axios, basePath));
        },
        /**
         * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
         * @summary Earnings Call Transcripts List
         * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transcriptsList(symbol, options) {
            return localVarFp.transcriptsList(symbol, options).then((request) => request(axios, basePath));
        },
        /**
         * Get latest stock upgrade and downgrade.
         * @summary Stock Upgrade/Downgrade
         * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
         * @param {string} [from] From date: 2000-03-15.
         * @param {string} [to] To date: 2020-03-16.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradeDowngrade(symbol, from, to, options) {
            return localVarFp.upgradeDowngrade(symbol, from, to, options).then((request) => request(axios, basePath));
        },
    };
};
exports.DefaultApiFactory = DefaultApiFactory;
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
class DefaultApi extends base_1.BaseAPI {
    /**
     * Get aggregate signal of multiple technical indicators such as MACD, RSI, Moving Average v.v.
     * @summary Aggregate Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    aggregateIndicator(symbol, resolution, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .aggregateIndicator(symbol, resolution, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get end-of-day bond\'s price data.
     * @summary Bond price data
     * @param {string} isin ISIN.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    bondPrice(isin, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .bondPrice(isin, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get general information of a bond. You can query by FIGI, ISIN or CUSIP
     * @summary Bond Profile
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {string} [figi] FIGI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    bondProfile(isin, cusip, figi, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .bondProfile(isin, cusip, figi, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company basic financials such as margin, P/E ratio, 52-week high/low etc.
     * @summary Basic Financials
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} metric Metric type. Can be 1 of the following values &lt;code&gt;all&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyBasicFinancials(symbol, metric, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyBasicFinancials(symbol, metric, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company historical quarterly earnings surprise going back to 2000.
     * @summary Earnings Surprises
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of period returned. Leave blank to get the full history.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEarnings(symbol, limit, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyEarnings(symbol, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint provides Earnings Quality Score for global companies.</p><p> Earnings quality refers to the extent to which current earnings predict future earnings. \"High-quality\" earnings are expected to persist, while \"low-quality\" earnings do not. A higher score means a higher earnings quality</p><p>Finnhub uses a proprietary model which takes into consideration 4 criteria:</p> <ul style=\"list-style-type: unset; margin-left: 30px;\"><li>Profitability</li><li>Growth</li><li>Cash Generation & Capital Allocation</li><li>Leverage</li></ul><br/><p>We then compare the metrics of each company in each category against its peers in the same industry to gauge how quality its earnings is.</p>
     * @summary Company Earnings Quality Score
     * @param {string} symbol Symbol.
     * @param {string} freq Frequency. Currently support &lt;code&gt;annual&lt;/code&gt; and &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEarningsQualityScore(symbol, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyEarningsQualityScore(symbol, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company\'s ebit estimates.
     * @summary EBIT Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEbitEstimates(symbol, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyEbitEstimates(symbol, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company\'s ebitda estimates.
     * @summary EBITDA Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEbitdaEstimates(symbol, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyEbitdaEstimates(symbol, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company\'s EPS estimates.
     * @summary Earnings Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEpsEstimates(symbol, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyEpsEstimates(symbol, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint provides ESG scores and important indicators for 1000+ global companies. The data is collected through company\'s public ESG disclosure and public sources.</p><p>Our ESG scoring models takes into account more than 150 different inputs to calculate the level of ESG risks and how well a company is managing them. A higher score means lower ESG risk or better ESG management. ESG scores are in the the range of 0-100. Some key indicators might contain letter-grade score from C- to A+ with C- is the lowest score and A+ is the highest score.</p>
     * @summary Company ESG Scores
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyEsgScore(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyEsgScore(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of company\'s executives and members of the Board.
     * @summary Company Executive
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyExecutive(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyExecutive(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List latest company news by symbol. This endpoint is only available for North American companies.
     * @summary Company News
     * @param {string} symbol Company symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyNews(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyNews(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company peers. Return a list of peers in the same country and sub-industry
     * @summary Peers
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyPeers(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyPeers(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP
     * @summary Company Profile
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyProfile(symbol, isin, cusip, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyProfile(symbol, isin, cusip, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get general information of a company. You can query by symbol, ISIN or CUSIP. This is the free version of <a href=\"#company-profile\">Company Profile</a>.
     * @summary Company Profile 2
     * @param {string} [symbol] Symbol of the company: AAPL e.g.
     * @param {string} [isin] ISIN
     * @param {string} [cusip] CUSIP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyProfile2(symbol, isin, cusip, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyProfile2(symbol, isin, cusip, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company\'s revenue estimates.
     * @summary Revenue Estimates
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} [freq] Can take 1 of the following values: &lt;code&gt;annual, quarterly&lt;/code&gt;. Default to &lt;code&gt;quarterly&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    companyRevenueEstimates(symbol, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .companyRevenueEstimates(symbol, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List all countries and metadata.
     * @summary Country Metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    country(options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .country(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get real-time updates on the number of COVID-19 (Corona virus) cases in the US with a state-by-state breakdown. Data is sourced from CDC and reputable sources. You can also access this API <a href=\"https://rapidapi.com/Finnhub/api/finnhub-real-time-covid-19\" target=\"_blank\" rel=\"nofollow\">here</a>
     * @summary COVID-19
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    covid19(options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .covid19(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get candlestick data for crypto symbols.
     * @summary Crypto Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/crypto/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoCandles(symbol, resolution, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .cryptoCandles(symbol, resolution, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List supported crypto exchanges
     * @summary Crypto Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoExchanges(options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .cryptoExchanges(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get crypto\'s profile.
     * @summary Crypto Profile
     * @param {string} symbol Crypto symbol such as BTC or ETH.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoProfile(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .cryptoProfile(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List supported crypto symbols by exchange
     * @summary Crypto Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    cryptoSymbols(exchange, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .cryptoSymbols(exchange, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get historical and coming earnings release. EPS and Revenue in this endpoint are non-GAAP, which means they are adjusted to exclude some one-time or unusual items. This is the same data investors usually react to and talked about on the media. Estimates are sourced from both sell-side and buy-side analysts.
     * @summary Earnings Calendar
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {string} [symbol] Filter by symbol: AAPL.
     * @param {boolean} [international] Set to &lt;code&gt;true&lt;/code&gt; to include international markets. Default value is &lt;code&gt;false&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    earningsCalendar(from, to, symbol, international, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .earningsCalendar(from, to, symbol, international, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get recent and upcoming economic releases.</p><p>Historical events and surprises are available for Enterprise clients.</p>
     * @summary Economic Calendar
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    economicCalendar(from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .economicCalendar(from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List codes of supported economic data.
     * @summary Economic Code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    economicCode(options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .economicCode(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get economic data.
     * @summary Economic Data
     * @param {string} code Economic code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    economicData(code, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .economicData(code, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get ETF country exposure data.
     * @summary ETFs Country Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsCountryExposure(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .etfsCountryExposure(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get full ETF holdings/constituents. This endpoint has global coverage. Widget only shows top 10 holdings.
     * @summary ETFs Holdings
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {string} [date] Query holdings by date. You can use either this param or &lt;code&gt;skip&lt;/code&gt; param, not both.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsHoldings(symbol, isin, skip, date, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .etfsHoldings(symbol, isin, skip, date, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get ETF profile information. This endpoint has global coverage.
     * @summary ETFs Profile
     * @param {string} [symbol] ETF symbol.
     * @param {string} [isin] ETF isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsProfile(symbol, isin, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .etfsProfile(symbol, isin, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get ETF sector exposure data.
     * @summary ETFs Sector Exposure
     * @param {string} symbol ETF symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    etfsSectorExposure(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .etfsSectorExposure(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * FDA\'s advisory committees are established to provide functions which support the agency\'s mission of protecting and promoting the public health, while meeting the requirements set forth in the Federal Advisory Committee Act. Committees are either mandated by statute or established at the discretion of the Department of Health and Human Services. Each committee is subject to renewal at two-year intervals unless the committee charter states otherwise.
     * @summary FDA Committee Meeting Calendar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    fdaCommitteeMeetingCalendar(options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .fdaCommitteeMeetingCalendar(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List company\'s filing. Limit to 250 documents at a time. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/sec-filings\" target=\"_blank\">Kaggle SEC Filings database</a>.
     * @summary SEC Filings
     * @param {string} [symbol] Symbol. Leave &lt;code&gt;symbol&lt;/code&gt;,&lt;code&gt;cik&lt;/code&gt; and &lt;code&gt;accessNumber&lt;/code&gt; empty to list latest filings.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve data from.
     * @param {string} [form] Filter by form. You can use this value &lt;code&gt;NT 10-K&lt;/code&gt; to find non-timely filings for a company.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    filings(symbol, cik, accessNumber, form, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .filings(symbol, cik, accessNumber, form, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get sentiment analysis of 10-K and 10-Q filings from SEC. An abnormal increase in the number of positive/negative words in filings can signal a significant change in the company\'s stock price in the upcoming 4 quarters. We make use of <a href= \"https://sraf.nd.edu/textual-analysis/resources/\" target=\"_blank\">Loughran and McDonald Sentiment Word Lists</a> to calculate the sentiment for each filing.
     * @summary SEC Sentiment Analysis
     * @param {string} accessNumber Access number of a specific report you want to retrieve data from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    filingsSentiment(accessNumber, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .filingsSentiment(accessNumber, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get standardized balance sheet, income statement and cash flow for global companies going back 30+ years. Data is sourced from original filings most of which made available through <a href=\"#filings\">SEC Filings</a> and <a href=\"#international-filings\">International Filings</a> endpoints.</p><p><i>Wondering why our standardized data is different from Bloomberg, Reuters, Factset, S&P or Yahoo Finance ? Check out our <a href=\"/faq\">FAQ page</a> to learn more</i></p>
     * @summary Financial Statements
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} statement Statement can take 1 of these values &lt;code&gt;bs, ic, cf&lt;/code&gt; for Balance Sheet, Income Statement, Cash Flow respectively.
     * @param {string} freq Frequency can take 1 of these values &lt;code&gt;annual, quarterly, ttm, ytd&lt;/code&gt;.  TTM (Trailing Twelve Months) option is available for Income Statement and Cash Flow. YTD (Year To Date) option is only available for Cash Flow.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    financials(symbol, statement, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .financials(symbol, statement, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get financials as reported. This data is available for bulk download on <a href=\"https://www.kaggle.com/finnhub/reported-financials\" target=\"_blank\">Kaggle SEC Financials database</a>.
     * @summary Financials As Reported
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {string} [accessNumber] Access number of a specific report you want to retrieve financials from.
     * @param {string} [freq] Frequency. Can be either &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    financialsReported(symbol, cik, accessNumber, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .financialsReported(symbol, cik, accessNumber, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get candlestick data for forex symbols.
     * @summary Forex Candles
     * @param {string} symbol Use symbol returned in &lt;code&gt;/forex/symbol&lt;/code&gt; endpoint for this field.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexCandles(symbol, resolution, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .forexCandles(symbol, resolution, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List supported forex exchanges
     * @summary Forex Exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexExchanges(options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .forexExchanges(options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get rates for all forex pairs. Ideal for currency conversion
     * @summary Forex rates
     * @param {string} [base] Base currency. Default to EUR.
     * @param {string} [date] Date. Leave blank to get the latest data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexRates(base, date, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .forexRates(base, date, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List supported forex symbols.
     * @summary Forex Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    forexSymbols(exchange, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .forexSymbols(exchange, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a full list fund and institutional investors of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Fund Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    fundOwnership(symbol, limit, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .fundOwnership(symbol, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of index\'s constituents. A list of supported indices for this endpoint can be found <a href=\"https://docs.google.com/spreadsheets/d/1Syr2eLielHWsorxkDEZXyc55d6bNx1M3ZeI4vdn7Qzo/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Indices Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    indicesConstituents(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .indicesConstituents(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get full history of index\'s constituents including symbols and dates of joining and leaving the Index. Currently support <code>^GSPC</code>, <code>^NDX</code>, <code>^DJI</code>
     * @summary Indices Historical Constituents
     * @param {string} symbol symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    indicesHistoricalConstituents(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .indicesHistoricalConstituents(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get insider sentiment data for US companies calculated using method discussed <a href=\"https://medium.com/@stock-api/finnhub-insiders-sentiment-analysis-cc43f9f64b3a\" target=\"_blank\">here</a>. The MSPR ranges from -100 for the most negative to 100 for the most positive which can signal price changes in the coming 30-90 days.
     * @summary Insider Sentiment
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insiderSentiment(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .insiderSentiment(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Company insider transactions data sourced from <code>Form 3,4,5</code>. This endpoint only covers US companies at the moment. Limit to 100 transactions per API call.
     * @summary Insider Transactions
     * @param {string} symbol Symbol of the company: AAPL. Leave this param blank to get the latest transactions.
     * @param {string} [from] From date: 2020-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    insiderTransactions(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .insiderTransactions(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List filings for international companies. Limit to 250 documents at a time. These are the documents we use to source our fundamental data.
     * @summary International Filings
     * @param {string} [symbol] Symbol. Leave empty to list latest filings.
     * @param {string} [country] Filter by country using country\&#39;s 2-letter code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    internationalFilings(symbol, country, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .internationalFilings(symbol, country, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Thematic investing involves creating a portfolio (or portion of a portfolio) by gathering together a collection of companies involved in certain areas that you predict will generate above-market returns over the long term. Themes can be based on a concept such as ageing populations or a sub-sector such as robotics, and drones. Thematic investing focuses on predicted long-term trends rather than specific companies or sectors, enabling investors to access structural, one-off shifts that can change an entire industry.</p><p>This endpoint will help you get portfolios of different investment themes that are changing our life and are the way of the future.</p><p>A full list of themes supported can be found <a target=\"_blank\" href=\"https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp=sharing\">here</a>. The theme coverage and portfolios are updated bi-weekly by our analysts. Our approach excludes penny, super-small cap and illiquid stocks.</p>
     * @summary Investment Themes (Thematic Investing)
     * @param {string} theme Investment theme. A full list of themes supported can be found &lt;a target&#x3D;\&quot;_blank\&quot; href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ULj9xDh4iPoQj279M084adZ2_S852ttRthKKJ7madYc/edit?usp&#x3D;sharing\&quot;&gt;here&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    investmentThemes(theme, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .investmentThemes(theme, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get recent and upcoming IPO.
     * @summary IPO Calendar
     * @param {string} from From date: 2020-03-15.
     * @param {string} to To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    ipoCalendar(from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .ipoCalendar(from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get latest market news.
     * @summary Market News
     * @param {string} category This parameter can be 1 of the following values &lt;code&gt;general, forex, crypto, merger&lt;/code&gt;.
     * @param {number} [minId] Use this field to get only news after this ID. Default to 0
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    marketNews(category, minId, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .marketNews(category, minId, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Mutual Funds country exposure data.
     * @summary Mutual Funds Country Exposure
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundCountryExposure(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .mutualFundCountryExposure(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get full Mutual Funds holdings/constituents. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Holdings
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {number} [skip] Skip the first n results. You can use this parameter to query historical constituents data. The latest result is returned if skip&#x3D;0 or not set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundHoldings(symbol, isin, skip, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .mutualFundHoldings(symbol, isin, skip, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get mutual funds profile information. This endpoint covers both US and global mutual funds. For international funds, you must query the data using ISIN.
     * @summary Mutual Funds Profile
     * @param {string} [symbol] Fund\&#39;s symbol.
     * @param {string} [isin] Fund\&#39;s isin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundProfile(symbol, isin, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .mutualFundProfile(symbol, isin, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Mutual Funds sector exposure data.
     * @summary Mutual Funds Sector Exposure
     * @param {string} symbol Mutual Fund symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    mutualFundSectorExposure(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .mutualFundSectorExposure(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get company\'s news sentiment and statistics. This endpoint is only available for US companies.
     * @summary News Sentiment
     * @param {string} symbol Company symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    newsSentiment(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .newsSentiment(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a full list of shareholders of a company in descending order of the number of shares held. Data is sourced from <code>13F form</code>, <code>Schedule 13D</code> and <code>13G</code> for US market, <code>UK Share Register</code> for UK market, <code>SEDI</code> for Canadian market and equivalent filings for other international markets.
     * @summary Ownership
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {number} [limit] Limit number of results. Leave empty to get the full list.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    ownership(symbol, limit, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .ownership(symbol, limit, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Run pattern recognition algorithm on a symbol. Support double top/bottom, triple top/bottom, head and shoulders, triangle, wedge, channel, flag, and candlestick patterns.
     * @summary Pattern Recognition
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    patternRecognition(symbol, resolution, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .patternRecognition(symbol, resolution, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get latest major press releases of a company. This data can be used to highlight the most significant events comprised of mostly press releases sourced from the exchanges, BusinessWire, AccessWire, GlobeNewswire, Newsfile, and PRNewswire.</p><p>Full-text press releases data is available for Enterprise clients. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Major Press Releases
     * @param {string} symbol Company symbol.
     * @param {string} [from] From time: 2020-01-01.
     * @param {string} [to] To time: 2020-01-05.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    pressReleases(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .pressReleases(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get latest price target consensus.
     * @summary Price Target
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    priceTarget(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .priceTarget(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get real-time quote data for US stocks. Constant polling is not recommended. Use websocket if you need real-time updates.</p><p>Real-time stock prices for international markets are supported for Enterprise clients via our partner\'s feed. <a href=\"mailto:support@finnhub.io\">Contact Us</a> to learn more.</p>
     * @summary Quote
     * @param {string} symbol Symbol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    quote(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .quote(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get latest analyst recommendation trends for a company.
     * @summary Recommendation Trends
     * @param {string} symbol Symbol of the company: AAPL.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    recommendationTrends(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .recommendationTrends(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get revenue breakdown by product. This dataset is only available for US companies which disclose their revenue breakdown in the annual or quarterly reports.
     * @summary Revenue Breakdown
     * @param {string} [symbol] Symbol.
     * @param {string} [cik] CIK.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    revenueBreakdown(symbol, cik, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .revenueBreakdown(symbol, cik, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Calculate the textual difference between a company\'s 10-K / 10-Q reports and the same type of report in the previous year using Cosine Similarity. For example, this endpoint compares 2019\'s 10-K with 2018\'s 10-K. Companies breaking from its routines in disclosure of financial condition and risk analysis section can signal a significant change in the company\'s stock price in the upcoming 4 quarters.</p>
     * @summary Similarity Index
     * @param {string} [symbol] Symbol. Required if cik is empty
     * @param {string} [cik] CIK. Required if symbol is empty
     * @param {string} [freq] &lt;code&gt;annual&lt;/code&gt; or &lt;code&gt;quarterly&lt;/code&gt;. Default to &lt;code&gt;annual&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    similarityIndex(symbol, cik, freq, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .similarityIndex(symbol, cik, freq, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get social sentiment for stocks on Reddit and Twitter. This endpoint is currently in Beta.</p>
     * @summary Social Sentiment
     * @param {string} symbol Company symbol.
     * @param {string} [from] From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} [to] To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    socialSentiment(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .socialSentiment(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get global dividends data.
     * @summary Dividends 2 (Basic)
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockBasicDividends(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockBasicDividends(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get last bid/ask data for US stocks.
     * @summary Last Bid-Ask
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockBidask(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockBidask(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get candlestick data (OHLCV) for stocks.</p><p>Daily data will be adjusted for Splits. Intraday data will remain unadjusted.</p>
     * @summary Stock Candles
     * @param {string} symbol Symbol.
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockCandles(symbol, resolution, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockCandles(symbol, resolution, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get dividends data for common stocks going back 30 years.
     * @summary Dividends
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockDividends(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockDividends(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of reported lobbying activities in the Senate and the House.
     * @summary Senate Lobbying
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockLobbying(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockLobbying(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get historical best bid and offer for US stocks, LSE, TSX, Euronext and Deutsche Borse.</p><p>For US market, this endpoint only serves historical NBBO from the beginning of 2020. To download more historical data, please visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a>.</p>
     * @summary Historical NBBO
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockNbbo(symbol, date, limit, skip, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockNbbo(symbol, date, limit, skip, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get splits data for stocks.
     * @summary Splits
     * @param {string} symbol Symbol.
     * @param {string} from YYYY-MM-DD.
     * @param {string} to YYYY-MM-DD.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockSplits(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockSplits(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List supported stocks. We use the following symbology to identify stocks on Finnhub <code>Exchange_Ticker.Exchange_Code</code>. A list of supported exchange codes can be found <a href=\"https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Stock Symbol
     * @param {string} exchange Exchange you want to get the list of symbols from. List of exchange codes can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1I3pBxjfXB056-g_JYf_6o3Rns3BV2kMGG1nCatb91ls/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {string} [mic] Filter by MIC code.
     * @param {string} [securityType] Filter by security type used by OpenFigi standard.
     * @param {string} [currency] Filter by currency.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockSymbols(exchange, mic, securityType, currency, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockSymbols(exchange, mic, securityType, currency, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get historical tick data for global exchanges. You can send the request directly to our tick server at <a href=\"https://tick.finnhub.io/\">https://tick.finnhub.io/</a> with the same path and parameters or get redirected there if you call our main server.</p><p>For US market, you can visit our bulk download page in the Dashboard <a target=\"_blank\" href=\"/dashboard/download\",>here</a> to speed up the download process.</p><table class=\"table table-hover\">   <thead>     <tr>       <th>Exchange</th>       <th>Segment</th>       <th>Delay</th>     </tr>   </thead>   <tbody>     <tr>       <td class=\"text-blue\">US CTA/UTP</th>       <td>Full SIP</td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">TSX</th>       <td><ul><li>TSX</li><li>TSX Venture</li><li>Index</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">LSE</th>       <td><ul><li>London Stock Exchange (L)</li><li>LSE International (L)</li><li>LSE European (L)</li></ul></td>       <td>15 minute</td>     </tr>     <tr>       <td class=\"text-blue\">Euronext</th>       <td><ul> <li>Euronext Paris (PA)</li> <li>Euronext Amsterdam (AS)</li> <li>Euronext Lisbon (LS)</li> <li>Euronext Brussels (BR)</li> <li>Euronext Oslo (OL)</li> <li>Euronext London (LN)</li> <li>Euronext Dublin (IR)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>     <tr>       <td class=\"text-blue\">Deutsche Börse</th>       <td><ul> <li>Frankfurt (F)</li> <li>Xetra (DE)</li> <li>Duesseldorf (DU)</li> <li>Hamburg (HM)</li> <li>Berlin (BE)</li> <li>Hanover (HA)</li> <li>Stoxx (SX)</li> <li>TradeGate (TG)</li> <li>Zertifikate (SC)</li> <li>Index</li> <li>Warrant</li></ul></td>       <td>End-of-day</td>     </tr>   </tbody> </table>
     * @summary Tick Data
     * @param {string} symbol Symbol.
     * @param {string} date Date: 2020-04-02.
     * @param {number} limit Limit number of ticks returned. Maximum value: &lt;code&gt;25000&lt;/code&gt;
     * @param {number} skip Number of ticks to skip. Use this parameter to loop through the entire data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockTick(symbol, date, limit, skip, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockTick(symbol, date, limit, skip, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of government\'s spending activities from USASpending dataset for public companies. This dataset can help you identify companies that win big government contracts which is extremely important for industries such as Defense, Aerospace, and Education.
     * @summary USA Spending
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter for &lt;code&gt;actionDate&lt;/code&gt;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockUsaSpending(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockUsaSpending(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List USPTO patents for companies. Limit to 250 records per API call.
     * @summary USPTO Patents
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockUsptoPatent(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockUsptoPatent(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a list of H1-B and Permanent visa applications for companies from the DOL. The data is updated quarterly.
     * @summary H1-B Visa Application
     * @param {string} symbol Symbol.
     * @param {string} from From date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {string} to To date &lt;code&gt;YYYY-MM-DD&lt;/code&gt;. Filter on the &lt;code&gt;beginDate&lt;/code&gt; column.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    stockVisaApplication(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .stockVisaApplication(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>This endpoint provides an overall map of public companies\' key customers and suppliers. The data offers a deeper look into a company\'s supply chain and how products are created. The data will help investors manage risk, limit exposure or generate alpha-generating ideas and trading insights.</p>
     * @summary Supply Chain Relationships
     * @param {string} symbol Symbol.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    supplyChainRelationships(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .supplyChainRelationships(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get support and resistance levels for a symbol.
     * @summary Support/Resistance
     * @param {string} symbol Symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    supportResistance(symbol, resolution, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .supportResistance(symbol, resolution, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search for best-matching symbols based on your query. You can input anything from symbol, security\'s name to ISIN and Cusip.
     * @summary Symbol Lookup
     * @param {string} q Query text can be symbol, name, isin, or cusip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    symbolSearch(q, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .symbolSearch(q, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Return technical indicator with price data. List of supported indicators can be found <a href=\"https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp=sharing\" target=\"_blank\">here</a>.
     * @summary Technical Indicators
     * @param {string} symbol symbol
     * @param {string} resolution Supported resolution includes &lt;code&gt;1, 5, 15, 30, 60, D, W, M &lt;/code&gt;.Some timeframes might not be available depending on the exchange.
     * @param {number} from UNIX timestamp. Interval initial value.
     * @param {number} to UNIX timestamp. Interval end value.
     * @param {string} indicator Indicator name. Full list can be found &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;.
     * @param {object} [indicatorFields] Check out &lt;a href&#x3D;\&quot;https://docs.google.com/spreadsheets/d/1ylUvKHVYN2E87WdwIza8ROaCpd48ggEl1k5i5SgA29k/edit?usp&#x3D;sharing\&quot; target&#x3D;\&quot;_blank\&quot;&gt;this page&lt;/a&gt; to see which indicators and params are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .technicalIndicator(symbol, resolution, from, to, indicator, indicatorFields, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * <p>Get earnings call transcripts, audio and participants\' list. This endpoint is only available for US, UK, and Candian companies. <p>15+ years of data is available with 220,000+ audio which add up to 7TB in size.</p>
     * @summary Earnings Call Transcripts
     * @param {string} id Transcript\&#39;s id obtained with &lt;a href&#x3D;\&quot;#transcripts-list\&quot;&gt;Transcripts List endpoint&lt;/a&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transcripts(id, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .transcripts(id, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * List earnings call transcripts\' metadata. This endpoint is available for US, UK, European, Australian and Canadian companies.
     * @summary Earnings Call Transcripts List
     * @param {string} symbol Company symbol: AAPL. Leave empty to list the latest transcripts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    transcriptsList(symbol, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .transcriptsList(symbol, options)
            .then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get latest stock upgrade and downgrade.
     * @summary Stock Upgrade/Downgrade
     * @param {string} [symbol] Symbol of the company: AAPL. If left blank, the API will return latest stock upgrades/downgrades.
     * @param {string} [from] From date: 2000-03-15.
     * @param {string} [to] To date: 2020-03-16.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    upgradeDowngrade(symbol, from, to, options) {
        return (0, exports.DefaultApiFp)(this.configuration)
            .upgradeDowngrade(symbol, from, to, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
exports.DefaultApi = DefaultApi;
